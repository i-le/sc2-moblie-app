{"ast":null,"code":"/*\n包含n个action creator\n异步action\n同步action\n*/\nimport { AUTH_SUCCESS, ERROR_MSG, RECEIVE_USER, RESET_USER, RECEIVE_USER_LIST } from './Action-types';\nimport { reqRegister, reqLogin, reqUpdateUser, reqUser, reqUserList } from '../api'; //授权成功的同步 action\n\nconst authSuccess = user => ({\n  type: AUTH_SUCCESS,\n  data: user\n}); //错误提示星系的同步action\n\n\nconst errorMsg = msg => ({\n  type: ERROR_MSG,\n  data: msg\n}); // 接收用户的同步action\n\n\nconst receiveUser = user => ({\n  type: RECEIVE_USER,\n  data: user\n}); // 重制用户同步action\n\n\nexport const resetUser = msg => ({\n  type: RESET_USER,\n  data: msg\n}); // 接收用户列表的同步action\n\nexport const receiveUserList = userList => ({\n  type: RECEIVE_USER_LIST,\n  data: userList\n}); //注册异步 action\n\nexport const register = user => {\n  const {\n    username,\n    password,\n    password2,\n    type\n  } = user;\n\n  if (!username) {\n    return errorMsg('username is a MUST');\n  } else if (password !== password2) {\n    return errorMsg('ensure SAME password');\n  }\n\n  return async dispatch => {\n    // 发送注册的异步请求。\n    // 得到promise,通过then链式调用，获取数据\n\n    /* const promise = reqRegister(user)\n    promise.then(response => {\n        const result = response.data\n    }) */\n    // 直接获取异步结果\n    const response = await reqRegister({\n      username,\n      password,\n      type\n    });\n    console.log(\"register -> response\", response);\n    const result = response.data;\n\n    if (result.code === 0) {\n      // 成功，分发授权成功的同步action\n      console.log(result.data);\n      dispatch(authSuccess(result.data));\n    } else {\n      // 失败，分发错误提示信息的同步action\n      dispatch(errorMsg(result.msg));\n    }\n  };\n}; //登陆异步 action\n\nexport const login = user => {\n  const {\n    username,\n    password\n  } = user;\n\n  if (!username) {\n    return errorMsg('username is a MUST');\n  }\n\n  if (!password) {\n    return errorMsg('PASSWORD is a MUST');\n  }\n\n  return async dispatch => {\n    const response = await reqLogin({\n      username,\n      password\n    });\n    const result = response.data;\n\n    if (result.code === 0) {\n      dispatch(authSuccess(result.data));\n    } else {\n      dispatch(errorMsg(result.msg));\n    }\n  };\n}; // updating 异步 action\n\nexport const updateUser = user => {\n  return async dispatch => {\n    const response = await reqUpdateUser(user);\n    const result = response.data;\n\n    if (result.code === 0) {\n      dispatch(receiveUser(result.data));\n    } else {\n      dispatch(resetUser(result.data));\n    }\n  };\n}; // getting user aysn action\n\nexport const getUser = () => {\n  return async dispatch => {\n    const response = await reqUser();\n    const result = response.data;\n\n    if (result.code === 0) {\n      dispatch(receiveUser(result.data));\n    } else {\n      dispatch(resetUser(result.msg));\n    }\n  };\n}; // 获取用户列表的异步action\n\nexport const getUserList = type => {\n  return async dispatch => {\n    //执行异步ajax 请求\n    const response = await reqUserList(type);\n    const result = response.data; //得到结果后，分发一个同步action\n\n    if (result.code === 0) {\n      dispatch(receiveUserList(result.data));\n    }\n  };\n};","map":{"version":3,"sources":["/Users/s/Desktop/react/sc2-app/sc2-client/src/redux/Actions.js"],"names":["AUTH_SUCCESS","ERROR_MSG","RECEIVE_USER","RESET_USER","RECEIVE_USER_LIST","reqRegister","reqLogin","reqUpdateUser","reqUser","reqUserList","authSuccess","user","type","data","errorMsg","msg","receiveUser","resetUser","receiveUserList","userList","register","username","password","password2","dispatch","response","console","log","result","code","login","updateUser","getUser","getUserList"],"mappings":"AAAA;;;;;AAKA,SACIA,YADJ,EAEIC,SAFJ,EAGIC,YAHJ,EAIIC,UAJJ,EAKIC,iBALJ,QAMO,gBANP;AAQA,SACIC,WADJ,EAEIC,QAFJ,EAGIC,aAHJ,EAIIC,OAJJ,EAKIC,WALJ,QAMO,QANP,C,CAWA;;AACA,MAAMC,WAAW,GAAIC,IAAD,KAAW;AAACC,EAAAA,IAAI,EAAEZ,YAAP;AAAqBa,EAAAA,IAAI,EAAEF;AAA3B,CAAX,CAApB,C,CACA;;;AACA,MAAMG,QAAQ,GAAIC,GAAD,KAAU;AAACH,EAAAA,IAAI,EAAEX,SAAP;AAAkBY,EAAAA,IAAI,EAAEE;AAAxB,CAAV,CAAjB,C,CACA;;;AACA,MAAMC,WAAW,GAAIL,IAAD,KAAW;AAACC,EAAAA,IAAI,EAAEV,YAAP;AAAqBW,EAAAA,IAAI,EAAEF;AAA3B,CAAX,CAApB,C,CACA;;;AACA,OAAO,MAAMM,SAAS,GAAIF,GAAD,KAAU;AAACH,EAAAA,IAAI,EAAET,UAAP;AAAmBU,EAAAA,IAAI,EAAEE;AAAzB,CAAV,CAAlB,C,CACP;;AACA,OAAO,MAAMG,eAAe,GAAIC,QAAD,KAAe;AAACP,EAAAA,IAAI,EAAER,iBAAP;AAA0BS,EAAAA,IAAI,EAAEM;AAAhC,CAAf,CAAxB,C,CACP;;AACA,OAAO,MAAMC,QAAQ,GAAIT,IAAD,IAAU;AAC9B,QAAM;AACFU,IAAAA,QADE;AAEFC,IAAAA,QAFE;AAGFC,IAAAA,SAHE;AAIFX,IAAAA;AAJE,MAKFD,IALJ;;AAOA,MAAG,CAACU,QAAJ,EAAc;AACV,WAAOP,QAAQ,CAAC,oBAAD,CAAf;AACH,GAFD,MAEO,IAAGQ,QAAQ,KAAKC,SAAhB,EAA2B;AAC9B,WAAOT,QAAQ,CAAC,sBAAD,CAAf;AACH;;AAED,SAAO,MAAMU,QAAN,IAAkB;AACzB;AACA;;AACA;;;;AAIA;AACA,UAAMC,QAAQ,GAAG,MAAMpB,WAAW,CAAC;AACjCgB,MAAAA,QADiC;AAEjCC,MAAAA,QAFiC;AAGjCV,MAAAA;AAHiC,KAAD,CAAlC;AAKAc,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,QAApC;AACA,UAAMG,MAAM,GAAGH,QAAQ,CAACZ,IAAxB;;AACA,QAAIe,MAAM,CAACC,IAAP,KAAgB,CAApB,EAAuB;AACrB;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACf,IAAnB;AACAW,MAAAA,QAAQ,CAACd,WAAW,CAACkB,MAAM,CAACf,IAAR,CAAZ,CAAR;AACD,KAJD,MAIO;AACL;AACAW,MAAAA,QAAQ,CAACV,QAAQ,CAACc,MAAM,CAACb,GAAR,CAAT,CAAR;AACD;AACF,GAvBC;AAwBH,CAtCM,C,CA2CP;;AACA,OAAO,MAAMe,KAAK,GAAInB,IAAD,IAAU;AAC3B,QAAM;AAACU,IAAAA,QAAD;AAAWC,IAAAA;AAAX,MAAuBX,IAA7B;;AACA,MAAG,CAACU,QAAJ,EAAc;AACV,WAAOP,QAAQ,CAAC,oBAAD,CAAf;AACH;;AACD,MAAG,CAACQ,QAAJ,EAAc;AACV,WAAOR,QAAQ,CAAC,oBAAD,CAAf;AACH;;AAED,SAAO,MAAMU,QAAN,IAAkB;AACrB,UAAMC,QAAQ,GAAG,MAAMnB,QAAQ,CAAC;AAC9Be,MAAAA,QAD8B;AAE9BC,MAAAA;AAF8B,KAAD,CAA/B;AAIA,UAAMM,MAAM,GAAGH,QAAQ,CAACZ,IAAxB;;AACA,QAAIe,MAAM,CAACC,IAAP,KAAgB,CAApB,EAAuB;AACrBL,MAAAA,QAAQ,CAACd,WAAW,CAACkB,MAAM,CAACf,IAAR,CAAZ,CAAR;AACD,KAFD,MAEO;AACLW,MAAAA,QAAQ,CAACV,QAAQ,CAACc,MAAM,CAACb,GAAR,CAAT,CAAR;AACD;AACF,GAXH;AAYC,CArBE,C,CAuBH;;AACJ,OAAO,MAAMgB,UAAU,GAAIpB,IAAD,IAAU;AAClC,SAAO,MAAMa,QAAN,IAAkB;AACvB,UAAMC,QAAQ,GAAG,MAAMlB,aAAa,CAACI,IAAD,CAApC;AACA,UAAMiB,MAAM,GAAGH,QAAQ,CAACZ,IAAxB;;AACA,QAAGe,MAAM,CAACC,IAAP,KAAgB,CAAnB,EAAsB;AACpBL,MAAAA,QAAQ,CAACR,WAAW,CAACY,MAAM,CAACf,IAAR,CAAZ,CAAR;AACD,KAFD,MAEO;AACLW,MAAAA,QAAQ,CAACP,SAAS,CAACW,MAAM,CAACf,IAAR,CAAV,CAAR;AACD;AACF,GARD;AASD,CAVM,C,CAYP;;AACA,OAAO,MAAMmB,OAAO,GAAG,MAAM;AAC3B,SAAO,MAAMR,QAAN,IAAkB;AACvB,UAAMC,QAAQ,GAAG,MAAMjB,OAAO,EAA9B;AACA,UAAMoB,MAAM,GAAGH,QAAQ,CAACZ,IAAxB;;AACA,QAAIe,MAAM,CAACC,IAAP,KAAgB,CAApB,EAAuB;AACrBL,MAAAA,QAAQ,CAACR,WAAW,CAACY,MAAM,CAACf,IAAR,CAAZ,CAAR;AACD,KAFD,MAEO;AACLW,MAAAA,QAAQ,CAACP,SAAS,CAACW,MAAM,CAACb,GAAR,CAAV,CAAR;AACD;AACF,GARD;AASD,CAVM,C,CAYP;;AACA,OAAO,MAAMkB,WAAW,GAAIrB,IAAD,IAAU;AACnC,SAAO,MAAMY,QAAN,IAAkB;AAAE;AACzB,UAAMC,QAAQ,GAAG,MAAMhB,WAAW,CAACG,IAAD,CAAlC;AACA,UAAMgB,MAAM,GAAGH,QAAQ,CAACZ,IAAxB,CAFuB,CAGvB;;AACA,QAAGe,MAAM,CAACC,IAAP,KAAgB,CAAnB,EAAsB;AACpBL,MAAAA,QAAQ,CAACN,eAAe,CAACU,MAAM,CAACf,IAAR,CAAhB,CAAR;AACD;AACF,GAPD;AAQD,CATM","sourcesContent":["/*\n包含n个action creator\n异步action\n同步action\n*/\nimport {\n    AUTH_SUCCESS,\n    ERROR_MSG,\n    RECEIVE_USER,\n    RESET_USER,\n    RECEIVE_USER_LIST\n} from './Action-types'\n\nimport {\n    reqRegister,\n    reqLogin,\n    reqUpdateUser,\n    reqUser,\n    reqUserList\n} from '../api'\n\n\n\n\n//授权成功的同步 action\nconst authSuccess = (user) => ({type: AUTH_SUCCESS, data: user})\n//错误提示星系的同步action\nconst errorMsg = (msg) => ({type: ERROR_MSG, data: msg})\n// 接收用户的同步action\nconst receiveUser = (user) => ({type: RECEIVE_USER, data: user})\n// 重制用户同步action\nexport const resetUser = (msg) => ({type: RESET_USER, data: msg})\n// 接收用户列表的同步action\nexport const receiveUserList = (userList) => ({type: RECEIVE_USER_LIST, data: userList})\n//注册异步 action\nexport const register = (user) => {\n    const {\n        username, \n        password, \n        password2, \n        type\n    } = user\n\n    if(!username) {\n        return errorMsg('username is a MUST')\n    } else if(password !== password2) {\n        return errorMsg('ensure SAME password')\n    } \n        \n    return async dispatch => {\n    // 发送注册的异步请求。\n    // 得到promise,通过then链式调用，获取数据\n    /* const promise = reqRegister(user)\n    promise.then(response => {\n        const result = response.data\n    }) */\n    // 直接获取异步结果\n    const response = await reqRegister({\n      username,\n      password,\n      type\n    })\n    console.log(\"register -> response\", response)\n    const result = response.data\n    if (result.code === 0) {\n      // 成功，分发授权成功的同步action\n      console.log(result.data)\n      dispatch(authSuccess(result.data))\n    } else {\n      // 失败，分发错误提示信息的同步action\n      dispatch(errorMsg(result.msg))\n    }\n  }\n}\n\n\n\n\n//登陆异步 action\nexport const login = (user) => {\n    const {username, password} = user\n    if(!username) {\n        return errorMsg('username is a MUST')\n    }\n    if(!password) {\n        return errorMsg('PASSWORD is a MUST')\n    }\n\n    return async dispatch => {\n        const response = await reqLogin({\n          username,\n          password\n        })\n        const result = response.data\n        if (result.code === 0) {\n          dispatch(authSuccess(result.data))\n        } else {\n          dispatch(errorMsg(result.msg))\n        }\n      }\n    }\n\n    // updating 异步 action\nexport const updateUser = (user) => {\n  return async dispatch => {\n    const response = await reqUpdateUser(user)\n    const result = response.data\n    if(result.code === 0) {\n      dispatch(receiveUser(result.data))\n    } else {\n      dispatch(resetUser(result.data))\n    }\n  }\n}\n\n// getting user aysn action\nexport const getUser = () => {\n  return async dispatch => {\n    const response = await reqUser()\n    const result = response.data\n    if (result.code === 0) {\n      dispatch(receiveUser(result.data))\n    } else {\n      dispatch(resetUser(result.msg))\n    }\n  }\n}\n\n// 获取用户列表的异步action\nexport const getUserList = (type) => {\n  return async dispatch => { //执行异步ajax 请求\n    const response = await reqUserList(type)\n    const result = response.data\n    //得到结果后，分发一个同步action\n    if(result.code === 0) {\n      dispatch(receiveUserList(result.data))\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}