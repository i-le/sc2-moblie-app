{"ast":null,"code":"/*\n包含n个action creator\n异步action\n同步action\n*/\nimport io from 'socket.io-client';\nimport { AUTH_SUCCESS, ERROR_MSG, RECEIVE_USER, RESET_USER, RECEIVE_USER_LIST, RECEIVE_MSG_LIST, RECEIVE_MSG, MSG_READED } from './Action-types';\nimport { reqRegister, reqLogin, reqUpdateUser, reqUser, reqUserList, reqChatMsgList, reqReadMsg } from '../api'; //授权成功的同步 action\n\nconst authSuccess = user => ({\n  type: AUTH_SUCCESS,\n  data: user\n}); //错误提示星系的同步action\n\n\nconst errorMsg = msg => ({\n  type: ERROR_MSG,\n  data: msg\n}); // 接收用户的同步action\n\n\nconst receiveUser = user => ({\n  type: RECEIVE_USER,\n  data: user\n}); // 重制用户同步action\n\n\nexport const resetUser = msg => ({\n  type: RESET_USER,\n  data: msg\n}); // 接收用户列表的同步action\n\nexport const receiveUserList = userList => ({\n  type: RECEIVE_USER_LIST,\n  data: userList\n}); // 接收消息列表的同步action\n\nconst receiveMsgList = ({\n  users,\n  chatMsgs,\n  userid\n}) => ({\n  type: RECEIVE_MSG_LIST,\n  data: {\n    users,\n    chatMsgs,\n    userid\n  }\n}); // 接收一条消息的同步action\n\n\nconst receiveMsg = (chatMsg, userid) => ({\n  type: RECEIVE_MSG,\n  data: {\n    chatMsg,\n    userid\n  }\n}); // 读取了某条消息的同步action\n\n\nconst msgReaded = ({\n  count,\n  from,\n  to\n}) => ({\n  type: MSG_READED,\n  data: {\n    count,\n    from,\n    to\n  }\n}); //注册异步 action\n\n\nexport const register = user => {\n  const {\n    username,\n    password,\n    password2,\n    type\n  } = user;\n\n  if (!username) {\n    return errorMsg('username is a MUST');\n  } else if (password !== password2) {\n    return errorMsg('ensure SAME password');\n  }\n\n  return async dispatch => {\n    // 发送注册的异步请求。\n    // 得到promise,通过then链式调用，获取数据\n\n    /* const promise = reqRegister(user)\n    promise.then(response => {\n        const result = response.data\n    }) */\n    // 直接获取异步结果\n    const response = await reqRegister({\n      username,\n      password,\n      type\n    });\n    console.log(\"register -> response\", response);\n    const result = response.data;\n\n    if (result.code === 0) {\n      getMsgList(dispatch, result.data._id); // 成功，分发授权成功的同步action\n\n      console.log(result.data);\n      dispatch(authSuccess(result.data));\n    } else {\n      // 失败，分发错误提示信息的同步action\n      dispatch(errorMsg(result.msg));\n    }\n  };\n}; //登陆异步 action\n\nexport const login = user => {\n  const {\n    username,\n    password\n  } = user;\n\n  if (!username) {\n    return errorMsg('username is a MUST');\n  }\n\n  if (!password) {\n    return errorMsg('PASSWORD is a MUST');\n  }\n\n  return async dispatch => {\n    const response = await reqLogin({\n      username,\n      password\n    });\n    const result = response.data;\n\n    if (result.code === 0) {\n      getMsgList(dispatch, result.data._id);\n      dispatch(authSuccess(result.data));\n    } else {\n      dispatch(errorMsg(result.msg));\n    }\n  };\n}; // updating user 异步 action\n\nexport const updateUser = user => {\n  return async dispatch => {\n    const response = await reqUpdateUser(user);\n    const result = response.data;\n\n    if (result.code === 0) {\n      dispatch(receiveUser(result.data));\n    } else {\n      dispatch(resetUser(result.data));\n    }\n  };\n}; // getting user aysn action\n\nexport const getUser = () => {\n  return async dispatch => {\n    const response = await reqUser();\n    const result = response.data;\n\n    if (result.code === 0) {\n      getMsgList(dispatch, result.data._id);\n      dispatch(receiveUser(result.data));\n    } else {\n      dispatch(resetUser(result.msg));\n    }\n  };\n}; // 获取user list的异步action\n\nexport const getUserList = type => {\n  return async dispatch => {\n    //执行异步ajax 请求\n    const response = await reqUserList(type);\n    const result = response.data; //得到结果后，分发一个同步action\n\n    if (result.code === 0) {\n      dispatch(receiveUserList(result.data));\n    }\n  };\n}; // sending message的异步action\n\nexport const sendMsg = ({\n  from,\n  to,\n  content\n}) => {\n  return dispatch => {\n    console.log('send msg', {\n      from,\n      to,\n      content\n    }); // initIO()\n\n    io.socket.emit('sendMsg', {\n      from,\n      to,\n      content\n    });\n  };\n}; // 更新消息读取状态的异步action\n\nexport const readMsg = (from, to) => {\n  return async dispatch => {\n    const response = await reqReadMsg(from);\n    const result = response.data;\n\n    if (result.code === 0) {\n      const count = result.data;\n      dispatch(msgReaded({\n        count,\n        from,\n        to\n      }));\n    }\n  };\n};\n/* 单例对象：内存中只存一个socket对象\n* 1.创建对象之前：判断对象是否已经存在，只有不存在才创建\n* 2.创建之后：保存对象\n*/\n// 初始化wescoket\n\nfunction initIO(dispatch, userid) {\n  // io既是函数也是对象\n  if (!io.socket) {\n    io.socket = io('ws://localhost:8080'); // 保存对象\n\n    io.socket.on('receiveMsg', function (chatMsg) {\n      console.log('www：', chatMsg); // 只有当chatMsg是与当前用户相关的消息，才去分发同步action保存\n\n      if (userid === chatMsg.from || userid === chatMsg.to) {\n        dispatch(receiveMsg(chatMsg, userid));\n      }\n    });\n  }\n} // 异步获取消息列表(用户‘登录’上时调用)\n\n\nasync function getMsgList(dispatch, userid) {\n  initIO(dispatch, userid); //用户登陆成功时调用initIO\n\n  const response = await reqChatMsgList();\n  const result = response.data;\n\n  if (result.code === 0) {\n    const {\n      users,\n      chatMsgs\n    } = result.data; // 分发同步action\n\n    dispatch(receiveMsgList({\n      users,\n      chatMsgs,\n      userid\n    }));\n  }\n}","map":{"version":3,"sources":["/Users/s/Desktop/react/sc2-app/sc2-client/src/redux/Actions.js"],"names":["io","AUTH_SUCCESS","ERROR_MSG","RECEIVE_USER","RESET_USER","RECEIVE_USER_LIST","RECEIVE_MSG_LIST","RECEIVE_MSG","MSG_READED","reqRegister","reqLogin","reqUpdateUser","reqUser","reqUserList","reqChatMsgList","reqReadMsg","authSuccess","user","type","data","errorMsg","msg","receiveUser","resetUser","receiveUserList","userList","receiveMsgList","users","chatMsgs","userid","receiveMsg","chatMsg","msgReaded","count","from","to","register","username","password","password2","dispatch","response","console","log","result","code","getMsgList","_id","login","updateUser","getUser","getUserList","sendMsg","content","socket","emit","readMsg","initIO","on"],"mappings":"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","sourcesContent":["/*\n包含n个action creator\n异步action\n同步action\n*/\nimport io from 'socket.io-client'\nimport {\n    AUTH_SUCCESS,\n    ERROR_MSG,\n    RECEIVE_USER,\n    RESET_USER,\n    RECEIVE_USER_LIST,\n    RECEIVE_MSG_LIST,\n    RECEIVE_MSG,\n    MSG_READED\n} from './Action-types'\n\nimport {\n    reqRegister,\n    reqLogin,\n    reqUpdateUser,\n    reqUser,\n    reqUserList,\n    reqChatMsgList,\n    reqReadMsg\n} from '../api'\n\n\n\n\n//授权成功的同步 action\nconst authSuccess = (user) => ({type: AUTH_SUCCESS, data: user})\n//错误提示星系的同步action\nconst errorMsg = (msg) => ({type: ERROR_MSG, data: msg})\n// 接收用户的同步action\nconst receiveUser = (user) => ({type: RECEIVE_USER, data: user})\n// 重制用户同步action\nexport const resetUser = (msg) => ({type: RESET_USER, data: msg})\n// 接收用户列表的同步action\nexport const receiveUserList = (userList) => ({type: RECEIVE_USER_LIST, data: userList})\n// 接收消息列表的同步action\nconst receiveMsgList = ({users, chatMsgs, userid}) => ({\n  type: RECEIVE_MSG_LIST,\n  data: {users, chatMsgs, userid}\n})\n// 接收一条消息的同步action\nconst receiveMsg = (chatMsg, userid) => ({\n  type: RECEIVE_MSG,\n  data: {chatMsg, userid}\n})\n// 读取了某条消息的同步action\n\nconst msgReaded = ({count, from, to}) => ({\n  type: MSG_READED,\n  data: {count, from, to}\n})\n\n\n//注册异步 action\nexport const register = (user) => {\n    const {\n        username, \n        password, \n        password2, \n        type\n    } = user\n\n    if(!username) {\n        return errorMsg('username is a MUST')\n    } else if(password !== password2) {\n        return errorMsg('ensure SAME password')\n    } \n        \n    return async dispatch => {\n    // 发送注册的异步请求。\n    // 得到promise,通过then链式调用，获取数据\n    /* const promise = reqRegister(user)\n    promise.then(response => {\n        const result = response.data\n    }) */\n    // 直接获取异步结果\n    const response = await reqRegister({\n      username,\n      password,\n      type\n    })\n    console.log(\"register -> response\", response)\n    const result = response.data\n    if (result.code === 0) {\n      getMsgList(dispatch, result.data._id)\n      // 成功，分发授权成功的同步action\n      console.log(result.data)\n      dispatch(authSuccess(result.data))\n    } else {\n      // 失败，分发错误提示信息的同步action\n      dispatch(errorMsg(result.msg))\n    }\n  }\n}\n\n\n\n\n//登陆异步 action\nexport const login = (user) => {\n    const {username, password} = user\n    if(!username) {\n        return errorMsg('username is a MUST')\n    }\n    if(!password) {\n        return errorMsg('PASSWORD is a MUST')\n    }\n\n    return async dispatch => {\n        const response = await reqLogin({\n          username,\n          password\n        })\n        const result = response.data\n        if (result.code === 0) {\n          getMsgList(dispatch, result.data._id)\n          dispatch(authSuccess(result.data))\n        } else {\n          dispatch(errorMsg(result.msg))\n        }\n      }\n    }\n\n    // updating user 异步 action\nexport const updateUser = (user) => {\n  return async dispatch => {\n    const response = await reqUpdateUser(user)\n    const result = response.data\n    if(result.code === 0) {\n      dispatch(receiveUser(result.data))\n    } else {\n      dispatch(resetUser(result.data))\n    }\n  }\n}\n\n// getting user aysn action\nexport const getUser = () => {\n  return async dispatch => {\n    const response = await reqUser()\n    const result = response.data\n    if (result.code === 0) {\n      getMsgList(dispatch, result.data._id)\n      dispatch(receiveUser(result.data))\n    } else {\n      dispatch(resetUser(result.msg))\n    }\n  }\n}\n\n// 获取user list的异步action\nexport const getUserList = (type) => {\n  return async dispatch => { //执行异步ajax 请求\n    const response = await reqUserList(type)\n    const result = response.data\n    //得到结果后，分发一个同步action\n    if(result.code === 0) {\n      dispatch(receiveUserList(result.data))\n    }\n  }\n}\n\n// sending message的异步action\nexport const sendMsg = ({from, to, content}) => {\n  return dispatch => {\n    console.log('send msg', {from, to, content})\n    // initIO()\n    io.socket.emit('sendMsg', {from, to, content})\n  }\n}\n\n// 更新消息读取状态的异步action\nexport const readMsg = (from, to) => {\n  return async dispatch => {\n    const response = await reqReadMsg(from)\n    const result = response.data\n    if (result.code === 0) {\n      const count = result.data\n      dispatch(msgReaded({count, from, to}))\n    }\n  }\n}\n\n/* 单例对象：内存中只存一个socket对象\n* 1.创建对象之前：判断对象是否已经存在，只有不存在才创建\n* 2.创建之后：保存对象\n*/\n// 初始化wescoket\nfunction initIO(dispatch, userid) {\n  // io既是函数也是对象\n  if (!io.socket) {\n    io.socket = io('ws://localhost:8080')\n\n    // 保存对象\n    io.socket.on('receiveMsg', function(chatMsg) {\n      console.log('www：', chatMsg)\n      // 只有当chatMsg是与当前用户相关的消息，才去分发同步action保存\n      if (userid === chatMsg.from || userid === chatMsg.to) {\n        dispatch(receiveMsg(chatMsg, userid))\n      }\n    })\n  }\n}\n// 异步获取消息列表(用户‘登录’上时调用)\nasync function getMsgList(dispatch, userid) {\n  initIO(dispatch, userid) //用户登陆成功时调用initIO\n\n  const response = await reqChatMsgList()\n  const result = response.data\n  if (result.code === 0) {\n    const {users, chatMsgs} = result.data\n    // 分发同步action\n    dispatch(receiveMsgList({users, chatMsgs, userid}))\n  }\n}"]},"metadata":{},"sourceType":"module"}