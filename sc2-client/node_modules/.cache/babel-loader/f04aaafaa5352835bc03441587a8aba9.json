{"ast":null,"code":"import \"antd-mobile/lib/badge/style/css\";\nimport _Badge from \"antd-mobile/lib/badge\";\nimport \"antd-mobile/lib/list/style/css\";\nimport _List from \"antd-mobile/lib/list\";\nvar _jsxFileName = \"/Users/s/Desktop/react/sc2-app/sc2-client/src/containers/message/message.js\";\n\n/* \nmessage interface component\n*/\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nconst Item = _List.Item;\nconst Brief = Item.Brief;\n\nfunction getLastMsgs(chatMsgs, userid) {\n  // 1.find each target's lastMsg，save {chat_id: lastMsg} as one object\n  const lastMsgObj = {};\n  chatMsgs.forEach(msg => {\n    /* \n    getting unread message\n    */\n    // a.对msg进行个体统计(别人发给你，且read标识为未读)\n    if (msg.to === userid && !msg.read) {\n      msg.unReadCount = 1;\n    } else {\n      msg.unReadCount = 0;\n    }\n\n    const chatId = msg.chat_id; // getting saved lastMsg\n\n    const lastMsg = lastMsgObj[chatId];\n\n    if (!lastMsg) {\n      lastMsgObj[chatId] = msg;\n    } else {\n      // b.累加unReadCount = 已统计的 + 当前msg的\n      const unReadCount = lastMsg.unReadCount + msg.unReadCount; // 如果msg比lastMsg晚，就将msg保存为lastMsg\n\n      if (msg.create_time > lastMsg.create_time) {\n        lastMsgObj[chatId] = msg;\n      } // c.将unReadCount保存在最新的lastMsg上\n\n\n      lastMsgObj[chatId].unReadCount = unReadCount;\n    }\n  }); // 2.转化成lastMsg数组\n\n  const lastMsgs = Object.values(lastMsgObj); // 3.排序，按时间\n\n  lastMsgs.sort(function (m1, m2) {\n    // 结果<0, m1放前面\n    return m2.create_time - m1.create_time;\n  });\n  console.log(\"function_getLastMsgs -> lastMsgs\", lastMsgs);\n  return lastMsgs;\n}\n\nclass Message extends Component {\n  render() {\n    const {\n      user\n    } = this.props;\n    const {\n      users,\n      chatMsgs\n    } = this.props.chat; // 对chatMsg按chat_id进行分组，取出每组最后一条\n\n    const lastMsgs = getLastMsgs(chatMsgs, user._id);\n    return /*#__PURE__*/React.createElement(_List, {\n      style: {\n        marginTop: 50,\n        marginBottom: 50\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }\n    }, lastMsgs.map(msg => {\n      // getting target id\n      const targetUserId = msg.to === user._id ? msg.from : msg.to; // getting target id info\n\n      const targetUser = users[targetUserId];\n      return /*#__PURE__*/React.createElement(Item, {\n        extra: /*#__PURE__*/React.createElement(_Badge, {\n          text: msg.unReadCount,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 28\n          }\n        }),\n        thumb: targetUser.avatar ? require(`../../assets/sc2avatars/${targetUser.avatar}.png`) : null,\n        arrow: \"horizontal\",\n        key: msg.chat_id,\n        onClick: () => this.props.history.push(`/chat/${targetUserId}`),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }\n      }, msg.content, /*#__PURE__*/React.createElement(Brief, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }\n      }, targetUser.username));\n    }));\n  }\n\n}\n\nexport default connect(state => ({\n  user: state.user,\n  chat: state.chat\n}), {})(Message);","map":{"version":3,"sources":["/Users/s/Desktop/react/sc2-app/sc2-client/src/containers/message/message.js"],"names":["React","Component","connect","Item","Brief","getLastMsgs","chatMsgs","userid","lastMsgObj","forEach","msg","to","read","unReadCount","chatId","chat_id","lastMsg","create_time","lastMsgs","Object","values","sort","m1","m2","console","log","Message","render","user","props","users","chat","_id","marginTop","marginBottom","map","targetUserId","from","targetUser","avatar","require","history","push","content","username","state"],"mappings":";;;;;;AAAA;;;AAGA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,OAAR,QAAsB,aAAtB;AAGA,MAAMC,IAAI,GAAG,MAAKA,IAAlB;AACA,MAAMC,KAAK,GAAGD,IAAI,CAACC,KAAnB;;AAEA,SAASC,WAAT,CAAqBC,QAArB,EAA+BC,MAA/B,EAAuC;AACrC;AACA,QAAMC,UAAU,GAAG,EAAnB;AACAF,EAAAA,QAAQ,CAACG,OAAT,CAAiBC,GAAG,IAAI;AAEtB;;;AAGA;AACA,QAAIA,GAAG,CAACC,EAAJ,KAAWJ,MAAX,IAAqB,CAACG,GAAG,CAACE,IAA9B,EAAoC;AAClCF,MAAAA,GAAG,CAACG,WAAJ,GAAkB,CAAlB;AACD,KAFD,MAEO;AACLH,MAAAA,GAAG,CAACG,WAAJ,GAAkB,CAAlB;AACD;;AAED,UAAMC,MAAM,GAAGJ,GAAG,CAACK,OAAnB,CAZsB,CAatB;;AACA,UAAMC,OAAO,GAAGR,UAAU,CAACM,MAAD,CAA1B;;AACA,QAAI,CAACE,OAAL,EAAc;AACZR,MAAAA,UAAU,CAACM,MAAD,CAAV,GAAqBJ,GAArB;AACD,KAFD,MAEO;AAEL;AACA,YAAMG,WAAW,GAAGG,OAAO,CAACH,WAAR,GAAsBH,GAAG,CAACG,WAA9C,CAHK,CAKL;;AACA,UAAIH,GAAG,CAACO,WAAJ,GAAkBD,OAAO,CAACC,WAA9B,EAA2C;AACzCT,QAAAA,UAAU,CAACM,MAAD,CAAV,GAAqBJ,GAArB;AACD,OARI,CAUL;;;AACAF,MAAAA,UAAU,CAACM,MAAD,CAAV,CAAmBD,WAAnB,GAAiCA,WAAjC;AACD;AACF,GA9BD,EAHqC,CAkCrC;;AACA,QAAMK,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAcZ,UAAd,CAAjB,CAnCqC,CAoCrC;;AACAU,EAAAA,QAAQ,CAACG,IAAT,CAAc,UAASC,EAAT,EAAaC,EAAb,EAAiB;AAC7B;AACA,WAAOA,EAAE,CAACN,WAAH,GAAiBK,EAAE,CAACL,WAA3B;AACD,GAHD;AAKAO,EAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ,EAAgDP,QAAhD;AACA,SAAOA,QAAP;AACD;;AAED,MAAMQ,OAAN,SAAsBzB,SAAtB,CAAgC;AAE9B0B,EAAAA,MAAM,GAAG;AACP,UAAM;AAACC,MAAAA;AAAD,QAAS,KAAKC,KAApB;AACA,UAAM;AAACC,MAAAA,KAAD;AAAQxB,MAAAA;AAAR,QAAoB,KAAKuB,KAAL,CAAWE,IAArC,CAFO,CAGP;;AACA,UAAMb,QAAQ,GAAGb,WAAW,CAACC,QAAD,EAAWsB,IAAI,CAACI,GAAhB,CAA5B;AAEA,wBACE;AAAM,MAAA,KAAK,EAAE;AAACC,QAAAA,SAAS,EAAE,EAAZ;AAAgBC,QAAAA,YAAY,EAAE;AAA9B,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEIhB,QAAQ,CAACiB,GAAT,CAAazB,GAAG,IAAI;AAClB;AACA,YAAM0B,YAAY,GAAG1B,GAAG,CAACC,EAAJ,KAAWiB,IAAI,CAACI,GAAhB,GAAsBtB,GAAG,CAAC2B,IAA1B,GAAiC3B,GAAG,CAACC,EAA1D,CAFkB,CAGlB;;AACA,YAAM2B,UAAU,GAAGR,KAAK,CAACM,YAAD,CAAxB;AACA,0BACE,oBAAC,IAAD;AAAM,QAAA,KAAK,eAAE;AAAO,UAAA,IAAI,EAAE1B,GAAG,CAACG,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAb;AACE,QAAA,KAAK,EAAEyB,UAAU,CAACC,MAAX,GAAoBC,OAAO,CAAE,2BAA0BF,UAAU,CAACC,MAAO,MAA9C,CAA3B,GAAkF,IAD3F;AAEE,QAAA,KAAK,EAAC,YAFR;AAGE,QAAA,GAAG,EAAE7B,GAAG,CAACK,OAHX;AAIE,QAAA,OAAO,EAAE,MAAM,KAAKc,KAAL,CAAWY,OAAX,CAAmBC,IAAnB,CAAyB,SAAQN,YAAa,EAA9C,CAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMG1B,GAAG,CAACiC,OANP,eAOE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQL,UAAU,CAACM,QAAnB,CAPF,CADF;AAWD,KAhBD,CAFJ,CADF;AAuBD;;AA/B6B;;AAkChC,eAAe1C,OAAO,CACpB2C,KAAK,KAAK;AAACjB,EAAAA,IAAI,EAAEiB,KAAK,CAACjB,IAAb;AAAmBG,EAAAA,IAAI,EAAEc,KAAK,CAACd;AAA/B,CAAL,CADe,EAEpB,EAFoB,CAAP,CAGbL,OAHa,CAAf","sourcesContent":["/* \nmessage interface component\n*/\nimport React, { Component } from 'react'\nimport {connect} from 'react-redux'\nimport {List, Badge} from 'antd-mobile'\n\nconst Item = List.Item\nconst Brief = Item.Brief\n\nfunction getLastMsgs(chatMsgs, userid) {\n  // 1.find each target's lastMsg，save {chat_id: lastMsg} as one object\n  const lastMsgObj = {}\n  chatMsgs.forEach(msg => {\n\n    /* \n    getting unread message\n    */\n    // a.对msg进行个体统计(别人发给你，且read标识为未读)\n    if (msg.to === userid && !msg.read) {\n      msg.unReadCount = 1\n    } else {\n      msg.unReadCount = 0\n    }\n\n    const chatId = msg.chat_id\n    // getting saved lastMsg\n    const lastMsg = lastMsgObj[chatId]\n    if (!lastMsg) {\n      lastMsgObj[chatId] = msg\n    } else {\n      \n      // b.累加unReadCount = 已统计的 + 当前msg的\n      const unReadCount = lastMsg.unReadCount + msg.unReadCount\n\n      // 如果msg比lastMsg晚，就将msg保存为lastMsg\n      if (msg.create_time > lastMsg.create_time) {\n        lastMsgObj[chatId] = msg\n      }\n\n      // c.将unReadCount保存在最新的lastMsg上\n      lastMsgObj[chatId].unReadCount = unReadCount\n    }\n  })\n  // 2.转化成lastMsg数组\n  const lastMsgs = Object.values(lastMsgObj)\n  // 3.排序，按时间\n  lastMsgs.sort(function(m1, m2) {\n    // 结果<0, m1放前面\n    return m2.create_time - m1.create_time\n  })\n\n  console.log(\"function_getLastMsgs -> lastMsgs\", lastMsgs)\n  return lastMsgs\n}\n\nclass Message extends Component {\n \n  render() {\n    const {user} = this.props\n    const {users, chatMsgs} = this.props.chat\n    // 对chatMsg按chat_id进行分组，取出每组最后一条\n    const lastMsgs = getLastMsgs(chatMsgs, user._id)\n\n    return(\n      <List style={{marginTop: 50, marginBottom: 50}}>\n        {\n          lastMsgs.map(msg => {\n            // getting target id\n            const targetUserId = msg.to === user._id ? msg.from : msg.to\n            // getting target id info\n            const targetUser = users[targetUserId]\n            return (\n              <Item extra={<Badge text={msg.unReadCount} />}\n                thumb={targetUser.avatar ? require(`../../assets/sc2avatars/${targetUser.avatar}.png`) : null}\n                arrow='horizontal'\n                key={msg.chat_id}\n                onClick={() => this.props.history.push(`/chat/${targetUserId}`)}\n              >\n                {msg.content}\n                <Brief>{targetUser.username}</Brief>\n              </Item>\n            )\n          })\n        }\n      </List>\n    )\n  }\n}\n\nexport default connect(\n  state => ({user: state.user, chat: state.chat}),\n  {}\n)(Message)"]},"metadata":{},"sourceType":"module"}