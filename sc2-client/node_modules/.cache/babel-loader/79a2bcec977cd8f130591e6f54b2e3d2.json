{"ast":null,"code":"var _jsxFileName = \"/Users/s/Desktop/react/sc2-app/sc2-client/src/containers/main/Main.js\";\n\n/*\nmain page router componete\n*/\nimport React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport BossInfo from '../boss-info/boss-info';\nimport ProInfo from '../pro-info/pro-info';\nimport Cookies from 'js-cookie';\nimport { getRedirectTo } from '../../utils';\n\nclass Main extends React.Component {\n  //  in cookie have userid(&& redux user doent have _id)，send request get user's info\n  componentDidMount() {\n    const userid = Cookies.get('userid');\n    const {\n      _id\n    } = this.props.user;\n\n    if (userid && !_id) {\n      // send asyn request get user\n      console.log('----');\n      this.props.getUser();\n    }\n  }\n\n  render() {\n    // check if loged \n\n    /* const {user} = this.props\n    if (!user._id) {\n      return <Redirect to='/login' />\n    } */\n    // read cookie userid。if !，return back to log page\n    const userid = Cookies.get('userid'); // debugger\n\n    if (!userid) {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/login\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 14\n        }\n      });\n    } // if user => read state\n\n\n    const {\n      user\n    } = this.props; // \n\n    if (!user) {\n      return null;\n    } else {\n      // if user has _id\n      // then redirecting based on type and header s value\n      let path = this.props.location.pathname;\n\n      if (path === '/') {\n        path = getRedirectTo(user.type, user.header);\n        return /*#__PURE__*/React.createElement(Redirect, {\n          to: path,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 16\n          }\n        });\n      }\n    }\n\n    const {\n      navList\n    } = this;\n    const path = this.props.location.pathname;\n    const currentNav = navList.find(nav => nav.path === path); // hide boss/pro 's footer navbar\n\n    if (currentNav) {\n      if (user.type === 'laoban') {\n        navList[1].hide = true;\n      } else {\n        navList[0].hide = true;\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/bossinfo\",\n      component: BossInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/proinfo\",\n      component: ProInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nexport default connect(state => ({\n  user: state.user\n}))(Main);","map":{"version":3,"sources":["/Users/s/Desktop/react/sc2-app/sc2-client/src/containers/main/Main.js"],"names":["React","Switch","Route","Redirect","connect","BossInfo","ProInfo","Cookies","getRedirectTo","Main","Component","componentDidMount","userid","get","_id","props","user","console","log","getUser","render","path","location","pathname","type","header","navList","currentNav","find","nav","hide","state"],"mappings":"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","sourcesContent":["/*\nmain page router componete\n*/\n\nimport React from 'react'\nimport {Switch, Route, Redirect} from 'react-router-dom'\nimport {connect} from 'react-redux'\nimport BossInfo from '../boss-info/boss-info'\nimport ProInfo from '../pro-info/pro-info'\nimport Cookies from 'js-cookie'\nimport {getRedirectTo} from '../../utils'\n\n\n\nclass Main extends React.Component {\n\n   \n\n//  in cookie have userid(&& redux user doent have _id)，send request get user's info\ncomponentDidMount() {\n    const userid = Cookies.get('userid')\n    const {_id} = this.props.user\n    if (userid && !_id) {\n      // send asyn request get user\n      console.log('----');\n      this.props.getUser()\n    }\n  }\n\n\n\n    render() {\n\n        // check if loged \n    /* const {user} = this.props\n    if (!user._id) {\n      return <Redirect to='/login' />\n    } */\n\n    // read cookie userid。if !，return back to log page\n    const userid = Cookies.get('userid')\n    // debugger\n    if (!userid) {\n      return <Redirect to='/login' />\n    }\n    // if user => read state\n    const {user} = this.props\n    // \n    if (!user) {\n      return null\n    } else {\n      // if user has _id\n      // then redirecting based on type and header s value\n      let path = this.props.location.pathname\n      if (path === '/') {\n        path = getRedirectTo(user.type, user.header)\n        return <Redirect to={path} />\n      }\n    }\n\n    const {navList} = this\n    const path = this.props.location.pathname\n    const currentNav = navList.find(nav => nav.path === path)\n\n    // hide boss/pro 's footer navbar\n    if (currentNav) {\n      if (user.type === 'laoban') {\n        navList[1].hide = true\n      } else {\n        navList[0].hide = true\n      }\n    }\n\n        return (\n            <div>\n                <Switch>\n                    <Route path='/bossinfo' component={BossInfo} />\n                    <Route path='/proinfo' component={ProInfo} />\n                </Switch>\n            </div>\n        )\n    }\n}\n\nexport default connect(\n    state => ({user: state.user})\n)(Main)"]},"metadata":{},"sourceType":"module"}