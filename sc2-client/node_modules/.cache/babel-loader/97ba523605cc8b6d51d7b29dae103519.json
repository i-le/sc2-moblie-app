{"ast":null,"code":"import _regeneratorRuntime from\"/Users/s/Desktop/react/sc2-app/sc2-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/s/Desktop/react/sc2-app/sc2-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";/*\n包含n个action creator\n异步action\n同步action\n*/import io from'socket.io-client';import{AUTH_SUCCESS,ERROR_MSG,RECEIVE_USER,RESET_USER,RECEIVE_USER_LIST,RECEIVE_MSG_LIST,RECEIVE_MSG,MSG_READED}from'./Action-types';import{reqRegister,reqLogin,reqUpdateUser,reqUser,reqUserList,reqChatMsgList,reqReadMsg}from'../api';//授权成功的同步 action\nvar authSuccess=function authSuccess(user){return{type:AUTH_SUCCESS,data:user};};//错误提示星系的同步action\nvar errorMsg=function errorMsg(msg){return{type:ERROR_MSG,data:msg};};// 接收用户的同步action\nvar receiveUser=function receiveUser(user){return{type:RECEIVE_USER,data:user};};// 重制用户同步action\nexport var resetUser=function resetUser(msg){return{type:RESET_USER,data:msg};};// 接收用户列表的同步action\nexport var receiveUserList=function receiveUserList(userList){return{type:RECEIVE_USER_LIST,data:userList};};// 接收消息列表的同步action\nvar receiveMsgList=function receiveMsgList(_ref){var users=_ref.users,chatMsgs=_ref.chatMsgs,userid=_ref.userid;return{type:RECEIVE_MSG_LIST,data:{users:users,chatMsgs:chatMsgs,userid:userid}};};// 接收一条消息的同步action\nvar receiveMsg=function receiveMsg(chatMsg,userid){return{type:RECEIVE_MSG,data:{chatMsg:chatMsg,userid:userid}};};// 读取了某条消息的同步action\nvar msgReaded=function msgReaded(_ref2){var count=_ref2.count,from=_ref2.from,to=_ref2.to;return{type:MSG_READED,data:{count:count,from:from,to:to}};};//注册异步 action\nexport var register=function register(user){var username=user.username,password=user.password,password2=user.password2,type=user.type;if(!username){return errorMsg('username is a MUST');}else if(password!==password2){return errorMsg('ensure SAME password');}return/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var response,result;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return reqRegister({username:username,password:password,type:type});case 2:response=_context.sent;console.log(\"register -> response\",response);result=response.data;if(result.code===0){getMsgList(dispatch,result.data._id);// 成功，分发授权成功的同步action\nconsole.log(result.data);dispatch(authSuccess(result.data));}else{// 失败，分发错误提示信息的同步action\ndispatch(errorMsg(result.msg));}case 6:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref3.apply(this,arguments);};}();};//登陆异步 action\nexport var login=function login(user){var username=user.username,password=user.password;if(!username){return errorMsg('username is a MUST');}if(!password){return errorMsg('PASSWORD is a MUST');}return/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){var response,result;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return reqLogin({username:username,password:password});case 2:response=_context2.sent;result=response.data;if(result.code===0){getMsgList(dispatch,result.data._id);dispatch(authSuccess(result.data));}else{dispatch(errorMsg(result.msg));}case 5:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref4.apply(this,arguments);};}();};// updating user 异步 action\nexport var updateUser=function updateUser(user){return/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch){var response,result;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return reqUpdateUser(user);case 2:response=_context3.sent;result=response.data;if(result.code===0){dispatch(receiveUser(result.data));}else{dispatch(resetUser(result.data));}case 5:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x3){return _ref5.apply(this,arguments);};}();};// getting user aysn action\nexport var getUser=function getUser(){return/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch){var response,result;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return reqUser();case 2:response=_context4.sent;result=response.data;if(result.code===0){getMsgList(dispatch,result.data._id);dispatch(receiveUser(result.data));}else{dispatch(resetUser(result.msg));}case 5:case\"end\":return _context4.stop();}}},_callee4);}));return function(_x4){return _ref6.apply(this,arguments);};}();};// 获取user list的异步action\nexport var getUserList=function getUserList(type){return/*#__PURE__*/function(){var _ref7=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(dispatch){var response,result;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return reqUserList(type);case 2:response=_context5.sent;result=response.data;//得到结果后，分发一个同步action\nif(result.code===0){dispatch(receiveUserList(result.data));}case 5:case\"end\":return _context5.stop();}}},_callee5);}));return function(_x5){return _ref7.apply(this,arguments);};}();};// sending message的异步action\nexport var sendMsg=function sendMsg(_ref8){var from=_ref8.from,to=_ref8.to,content=_ref8.content;return function(dispatch){console.log('send msg',{from:from,to:to,content:content});// initIO()\nio.socket.emit('sendMsg',{from:from,to:to,content:content});};};// 更新消息读取状态的异步action\nexport var readMsg=function readMsg(from,to){return/*#__PURE__*/function(){var _ref9=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(dispatch){var response,result,count;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.next=2;return reqReadMsg(from);case 2:response=_context6.sent;result=response.data;if(result.code===0){count=result.data;dispatch(msgReaded({count:count,from:from,to:to}));}case 5:case\"end\":return _context6.stop();}}},_callee6);}));return function(_x6){return _ref9.apply(this,arguments);};}();};/* 单例对象：内存中只存一个socket对象\n* 1.创建对象之前：判断对象是否已经存在，只有不存在才创建\n* 2.创建之后：保存对象\n*/ // 初始化wescoket\nfunction initIO(dispatch,userid){// io既是函数也是对象\nif(!io.socket){io.socket=io('ws://localhost:8080');// 保存对象\nio.socket.on('receiveMsg',function(chatMsg){console.log('www：',chatMsg);// 只有当chatMsg是与当前用户相关的消息，才去分发同步action保存\nif(userid===chatMsg.from||userid===chatMsg.to){dispatch(receiveMsg(chatMsg,userid));}});}}// 异步获取消息列表(用户‘登录’上时调用)\nfunction getMsgList(_x7,_x8){return _getMsgList.apply(this,arguments);}function _getMsgList(){_getMsgList=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(dispatch,userid){var response,result,_result$data,users,chatMsgs;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:initIO(dispatch,userid);//用户登陆成功时调用initIO\n_context7.next=3;return reqChatMsgList();case 3:response=_context7.sent;result=response.data;if(result.code===0){_result$data=result.data,users=_result$data.users,chatMsgs=_result$data.chatMsgs;// 分发同步action\ndispatch(receiveMsgList({users:users,chatMsgs:chatMsgs,userid:userid}));}case 6:case\"end\":return _context7.stop();}}},_callee7);}));return _getMsgList.apply(this,arguments);}","map":{"version":3,"sources":["/Users/s/Desktop/react/sc2-app/sc2-client/src/redux/Actions.js"],"names":["io","AUTH_SUCCESS","ERROR_MSG","RECEIVE_USER","RESET_USER","RECEIVE_USER_LIST","RECEIVE_MSG_LIST","RECEIVE_MSG","MSG_READED","reqRegister","reqLogin","reqUpdateUser","reqUser","reqUserList","reqChatMsgList","reqReadMsg","authSuccess","user","type","data","errorMsg","msg","receiveUser","resetUser","receiveUserList","userList","receiveMsgList","users","chatMsgs","userid","receiveMsg","chatMsg","msgReaded","count","from","to","register","username","password","password2","dispatch","response","console","log","result","code","getMsgList","_id","login","updateUser","getUser","getUserList","sendMsg","content","socket","emit","readMsg","initIO","on"],"mappings":"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","sourcesContent":["/*\n包含n个action creator\n异步action\n同步action\n*/\nimport io from 'socket.io-client'\nimport {\n    AUTH_SUCCESS,\n    ERROR_MSG,\n    RECEIVE_USER,\n    RESET_USER,\n    RECEIVE_USER_LIST,\n    RECEIVE_MSG_LIST,\n    RECEIVE_MSG,\n    MSG_READED\n} from './Action-types'\n\nimport {\n    reqRegister,\n    reqLogin,\n    reqUpdateUser,\n    reqUser,\n    reqUserList,\n    reqChatMsgList,\n    reqReadMsg\n} from '../api'\n\n\n\n\n//授权成功的同步 action\nconst authSuccess = (user) => ({type: AUTH_SUCCESS, data: user})\n//错误提示星系的同步action\nconst errorMsg = (msg) => ({type: ERROR_MSG, data: msg})\n// 接收用户的同步action\nconst receiveUser = (user) => ({type: RECEIVE_USER, data: user})\n// 重制用户同步action\nexport const resetUser = (msg) => ({type: RESET_USER, data: msg})\n// 接收用户列表的同步action\nexport const receiveUserList = (userList) => ({type: RECEIVE_USER_LIST, data: userList})\n// 接收消息列表的同步action\nconst receiveMsgList = ({users, chatMsgs, userid}) => ({\n  type: RECEIVE_MSG_LIST,\n  data: {users, chatMsgs, userid}\n})\n// 接收一条消息的同步action\nconst receiveMsg = (chatMsg, userid) => ({\n  type: RECEIVE_MSG,\n  data: {chatMsg, userid}\n})\n// 读取了某条消息的同步action\n\nconst msgReaded = ({count, from, to}) => ({\n  type: MSG_READED,\n  data: {count, from, to}\n})\n\n\n//注册异步 action\nexport const register = (user) => {\n    const {\n        username, \n        password, \n        password2, \n        type\n    } = user\n\n    if(!username) {\n        return errorMsg('username is a MUST')\n    } else if(password !== password2) {\n        return errorMsg('ensure SAME password')\n    } \n        \n    return async dispatch => {\n    // 发送注册的异步请求。\n    // 得到promise,通过then链式调用，获取数据\n    /* const promise = reqRegister(user)\n    promise.then(response => {\n        const result = response.data\n    }) */\n    // 直接获取异步结果\n    const response = await reqRegister({\n      username,\n      password,\n      type\n    })\n    console.log(\"register -> response\", response)\n    const result = response.data\n    if (result.code === 0) {\n      getMsgList(dispatch, result.data._id)\n      // 成功，分发授权成功的同步action\n      console.log(result.data)\n      dispatch(authSuccess(result.data))\n    } else {\n      // 失败，分发错误提示信息的同步action\n      dispatch(errorMsg(result.msg))\n    }\n  }\n}\n\n\n\n\n//登陆异步 action\nexport const login = (user) => {\n    const {username, password} = user\n    if(!username) {\n        return errorMsg('username is a MUST')\n    }\n    if(!password) {\n        return errorMsg('PASSWORD is a MUST')\n    }\n\n    return async dispatch => {\n        const response = await reqLogin({\n          username,\n          password\n        })\n        const result = response.data\n        if (result.code === 0) {\n          getMsgList(dispatch, result.data._id)\n          dispatch(authSuccess(result.data))\n        } else {\n          dispatch(errorMsg(result.msg))\n        }\n      }\n    }\n\n    // updating user 异步 action\nexport const updateUser = (user) => {\n  return async dispatch => {\n    const response = await reqUpdateUser(user)\n    const result = response.data\n    if(result.code === 0) {\n      dispatch(receiveUser(result.data))\n    } else {\n      dispatch(resetUser(result.data))\n    }\n  }\n}\n\n// getting user aysn action\nexport const getUser = () => {\n  return async dispatch => {\n    const response = await reqUser()\n    const result = response.data\n    if (result.code === 0) {\n      getMsgList(dispatch, result.data._id)\n      dispatch(receiveUser(result.data))\n    } else {\n      dispatch(resetUser(result.msg))\n    }\n  }\n}\n\n// 获取user list的异步action\nexport const getUserList = (type) => {\n  return async dispatch => { //执行异步ajax 请求\n    const response = await reqUserList(type)\n    const result = response.data\n    //得到结果后，分发一个同步action\n    if(result.code === 0) {\n      dispatch(receiveUserList(result.data))\n    }\n  }\n}\n\n// sending message的异步action\nexport const sendMsg = ({from, to, content}) => {\n  return dispatch => {\n    console.log('send msg', {from, to, content})\n    // initIO()\n    io.socket.emit('sendMsg', {from, to, content})\n  }\n}\n\n// 更新消息读取状态的异步action\nexport const readMsg = (from, to) => {\n  return async dispatch => {\n    const response = await reqReadMsg(from)\n    const result = response.data\n    if (result.code === 0) {\n      const count = result.data\n      dispatch(msgReaded({count, from, to}))\n    }\n  }\n}\n\n/* 单例对象：内存中只存一个socket对象\n* 1.创建对象之前：判断对象是否已经存在，只有不存在才创建\n* 2.创建之后：保存对象\n*/\n// 初始化wescoket\nfunction initIO(dispatch, userid) {\n  // io既是函数也是对象\n  if (!io.socket) {\n    io.socket = io('ws://localhost:8080')\n\n    // 保存对象\n    io.socket.on('receiveMsg', function(chatMsg) {\n      console.log('www：', chatMsg)\n      // 只有当chatMsg是与当前用户相关的消息，才去分发同步action保存\n      if (userid === chatMsg.from || userid === chatMsg.to) {\n        dispatch(receiveMsg(chatMsg, userid))\n      }\n    })\n  }\n}\n// 异步获取消息列表(用户‘登录’上时调用)\nasync function getMsgList(dispatch, userid) {\n  initIO(dispatch, userid) //用户登陆成功时调用initIO\n\n  const response = await reqChatMsgList()\n  const result = response.data\n  if (result.code === 0) {\n    const {users, chatMsgs} = result.data\n    // 分发同步action\n    dispatch(receiveMsgList({users, chatMsgs, userid}))\n  }\n}"]},"metadata":{},"sourceType":"module"}