{"ast":null,"code":"import _toConsumableArray from\"/Users/s/Desktop/react/sc2-app/sc2-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/s/Desktop/react/sc2-app/sc2-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";/*\n包含n个reducer函数：\n根据老得state和指定的action返回一个新的state\n*/import{combineReducers}from'redux';import{AUTH_SUCCESS,ERROR_MSG,RECEIVE_USER,RESET_USER,RECEIVE_USER_LIST,RECEIVE_MSG_LIST,RECEIVE_MSG,MSG_READED}from'./Action-types';import{getRedirectTo}from'../utils/index';var initUser={username:'',type:'',msg:'',redirectTo:''// 需要自动重定向的路由路径\n};//产生user状态的reducer\nfunction user(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initUser;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case AUTH_SUCCESS://data 是user\nvar _action$data=action.data,type=_action$data.type,avatar=_action$data.avatar;return _objectSpread(_objectSpread(_objectSpread({},state),action.data),{},{redirectTo:getRedirectTo(type,avatar)});case ERROR_MSG://data 是msg\nreturn _objectSpread(_objectSpread({},state),{},{msg:action.data});case RECEIVE_USER://data 是USER\nreturn action.data;case RESET_USER://data 是msg\nreturn _objectSpread(_objectSpread({},initUser),{},{msg:action.data});default:return state;}}var initUserList=[];// 产生userlist状态的reducer\nfunction userList(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initUserList;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case RECEIVE_USER_LIST://data is userList\nreturn action.data;default:return state;}}var initChat={// 所有用户简要信息（姓名，头像）\nusers:{},// 当前用户所有消息\nchatMsgs:[],// 未读消息总数\nunReadCount:0};function chat(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initChat;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case RECEIVE_MSG_LIST:var _action$data2=action.data,users=_action$data2.users,chatMsgs=_action$data2.chatMsgs,userid=_action$data2.userid;console.log(\"chat -> action.data\",action.data);return{users:users,chatMsgs:chatMsgs,// 直接在message也可统计\nunReadCount:chatMsgs.reduce(function(preTotal,msg){return preTotal+(!msg.read&&msg.to===userid?1:0);},0)};case RECEIVE_MSG:// const {chatMsg, userid} = action.data\nvar chatMsg=action.data.chatMsg;// debugger\nreturn{users:state.users,chatMsgs:[].concat(_toConsumableArray(state.chatMsgs),[chatMsg]),unReadCount:state.unReadCount+(!chatMsg.read&&chatMsg.to===action.data.userid?1:0)};case MSG_READED:var _action$data3=action.data,from=_action$data3.from,to=_action$data3.to,count=_action$data3.count;// state.chatMsgs.forEach(msg => {\n//   if (msg.from === from && msg.to === to && !msg.read) {\n//     msg.read = true\n//   }\n// })\nreturn{users:state.users,chatMsgs:state.chatMsgs.map(function(msg){// 需要更新\nif(msg.from===from&&msg.to===to&&!msg.read){// 新的msg中read: true,不改变原来的msg\n/* msg.read = true\n              return msg */return _objectSpread(_objectSpread({},msg),{},{read:true});}else{// 不需要更新\nreturn msg;}}),unReadCount:state.unReadCount-count};default:return state;}}//向外暴露的状态的结构 ： {user: { }}\nexport default combineReducers({user:user,userList:userList,chat:chat});","map":{"version":3,"sources":["/Users/s/Desktop/react/sc2-app/sc2-client/src/redux/Reducers.js"],"names":["combineReducers","AUTH_SUCCESS","ERROR_MSG","RECEIVE_USER","RESET_USER","RECEIVE_USER_LIST","RECEIVE_MSG_LIST","RECEIVE_MSG","MSG_READED","getRedirectTo","initUser","username","type","msg","redirectTo","user","state","action","data","avatar","initUserList","userList","initChat","users","chatMsgs","unReadCount","chat","userid","console","log","reduce","preTotal","read","to","chatMsg","from","count","map"],"mappings":"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","sourcesContent":["/*\n包含n个reducer函数：\n根据老得state和指定的action返回一个新的state\n*/\nimport {combineReducers} from 'redux'\n\nimport {\n    AUTH_SUCCESS,\n    ERROR_MSG,\n    RECEIVE_USER,\n    RESET_USER,\n    RECEIVE_USER_LIST,\n    RECEIVE_MSG_LIST,\n    RECEIVE_MSG,\n    MSG_READED\n} from './Action-types'\n\nimport {getRedirectTo} from '../utils/index'\n\nconst initUser = {\n    username: '',\n    type: '',\n    msg: '',\n    redirectTo: '' // 需要自动重定向的路由路径\n}\n\n//产生user状态的reducer\nfunction user(state = initUser, action) {\n    switch (action.type) {\n        case AUTH_SUCCESS: //data 是user\n        const {type, avatar} = action.data\n            return {...state, ...action.data, redirectTo: getRedirectTo(type, avatar)}\n        case ERROR_MSG: //data 是msg\n            return {...state, msg: action.data}\n        case RECEIVE_USER: //data 是USER\n            return action.data\n        case RESET_USER: //data 是msg\n            return {...initUser, msg: action.data}\n        default:\n            return state\n        }\n}\n\nconst initUserList = []\n// 产生userlist状态的reducer\nfunction userList(state=initUserList, action) {\n    switch (action.type) {\n        case RECEIVE_USER_LIST: //data is userList\n        return action.data\n        default:\n            return state\n    }\n}\n\nconst initChat = {\n    // 所有用户简要信息（姓名，头像）\n    users: {},\n    // 当前用户所有消息\n    chatMsgs: [],\n    // 未读消息总数\n    unReadCount: 0\n  }\n  function chat(state=initChat, action) {\n    switch (action.type) {\n      case RECEIVE_MSG_LIST:\n        const {users, chatMsgs, userid} = action.data\n        console.log(\"chat -> action.data\", action.data)\n        return {\n          users,\n          chatMsgs,\n          // 直接在message也可统计\n          unReadCount: chatMsgs.reduce((preTotal, msg) => preTotal + (!msg.read && msg.to === userid ? 1 : 0), 0)\n        }\n      case RECEIVE_MSG:\n        // const {chatMsg, userid} = action.data\n        const {chatMsg} = action.data\n        // debugger\n        return {\n          users: state.users,\n          chatMsgs: [...state.chatMsgs, chatMsg],\n          unReadCount: state.unReadCount + (!chatMsg.read && chatMsg.to === action.data.userid ? 1 : 0)\n        }\n      case MSG_READED:\n        const {from, to, count} = action.data\n        // state.chatMsgs.forEach(msg => {\n        //   if (msg.from === from && msg.to === to && !msg.read) {\n        //     msg.read = true\n        //   }\n        // })\n        return {\n          users: state.users,\n          chatMsgs: state.chatMsgs.map(msg => {\n            // 需要更新\n            if (msg.from === from && msg.to === to && !msg.read) {\n              // 新的msg中read: true,不改变原来的msg\n              /* msg.read = true\n              return msg */\n              return {...msg, read: true}\n            } else {\n              // 不需要更新\n              return msg\n            }\n          }),\n          unReadCount: state.unReadCount - count\n        }\n      default:\n        return state\n    }\n  }\n\n//向外暴露的状态的结构 ： {user: { }}\nexport default combineReducers({\n    user,\n    userList,\n    chat\n})\n\n"]},"metadata":{},"sourceType":"module"}