{"ast":null,"code":"/*\n包含n个action creator\n异步action\n同步action\n*/\nimport { AUTH_SUCCESS, ERROR_MSG } from './Action-types';\nimport { reqRegister, reqLogin } from '../api'; //授权成功的同步 action\n\nconst authSuccess = user => ({\n  type: AUTH_SUCCESS,\n  data: user\n}); //错误提示星系的同步action\n\n\nconst errorMsg = msg => ({\n  type: ERROR_MSG,\n  data: msg\n}); //注册异步 action\n\n\nexport const register = user => {\n  const {\n    username,\n    password,\n    password2,\n    type\n  } = user;\n\n  if (!username) {\n    return errorMsg('username is a MUST');\n  }\n\n  if (password !== password2) {\n    return errorMsg('ensure SAME password');\n  }\n\n  return async dispatch => {\n    // 发送注册的异步请求。\n    // 得到promise,通过then链式调用，获取数据\n\n    /* const promise = reqRegister(user)\n    promise.then(response => {\n        const result = response.data\n    }) */\n    // 直接获取异步结果\n    const response = await reqRegister({\n      username,\n      password,\n      type\n    });\n    console.log(\"register -> response\", response);\n    const result = response.data;\n\n    if (result.code === 0) {\n      // 成功，分发授权成功的同步action\n      dispatch(authSuccess(result.data));\n    } else {\n      // 失败，分发错误提示信息的同步action\n      dispatch(errorMsg(result.msg));\n    }\n  };\n}; //登陆异步 action\n\nexport const login = user => {\n  const {\n    username,\n    password\n  } = user;\n\n  if (!username) {\n    return errorMsg('username is a MUST');\n  }\n\n  if (!password) {\n    return errorMsg('PASSWORD is a MUST');\n  }\n\n  return async dispatch => {\n    const response = await reqLogin({\n      username,\n      password\n    });\n    const result = response.data;\n\n    if (result.code === 0) {\n      dispatch(authSuccess(result.data));\n    } else {\n      dispatch(errorMsg(result.msg));\n    }\n  };\n};","map":{"version":3,"sources":["/Users/s/Desktop/react/hiring-app/sc2-client/src/redux/Actions.js"],"names":["AUTH_SUCCESS","ERROR_MSG","reqRegister","reqLogin","authSuccess","user","type","data","errorMsg","msg","register","username","password","password2","dispatch","response","console","log","result","code","login"],"mappings":"AAAA;;;;;AAKA,SACIA,YADJ,EAEIC,SAFJ,QAGO,gBAHP;AAKA,SACIC,WADJ,EAEIC,QAFJ,QAGO,QAHP,C,CAQA;;AACA,MAAMC,WAAW,GAAIC,IAAD,KAAW;AAACC,EAAAA,IAAI,EAAEN,YAAP;AAAqBO,EAAAA,IAAI,EAAEF;AAA3B,CAAX,CAApB,C,CACA;;;AACA,MAAMG,QAAQ,GAAIC,GAAD,KAAU;AAACH,EAAAA,IAAI,EAAEL,SAAP;AAAkBM,EAAAA,IAAI,EAAEE;AAAxB,CAAV,CAAjB,C,CAEA;;;AACA,OAAO,MAAMC,QAAQ,GAAIL,IAAD,IAAU;AAC9B,QAAM;AACFM,IAAAA,QADE;AAEFC,IAAAA,QAFE;AAGFC,IAAAA,SAHE;AAIFP,IAAAA;AAJE,MAKFD,IALJ;;AAMA,MAAG,CAACM,QAAJ,EAAc;AACV,WAAOH,QAAQ,CAAC,oBAAD,CAAf;AACH;;AACD,MAAGI,QAAQ,KAAKC,SAAhB,EAA2B;AACvB,WAAOL,QAAQ,CAAC,sBAAD,CAAf;AACH;;AAOL,SAAO,MAAMM,QAAN,IAAkB;AACrB;AACA;;AACA;;;;AAIA;AACA,UAAMC,QAAQ,GAAG,MAAMb,WAAW,CAAC;AACjCS,MAAAA,QADiC;AAEjCC,MAAAA,QAFiC;AAGjCN,MAAAA;AAHiC,KAAD,CAAlC;AAKAU,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,QAApC;AACA,UAAMG,MAAM,GAAGH,QAAQ,CAACR,IAAxB;;AACA,QAAIW,MAAM,CAACC,IAAP,KAAgB,CAApB,EAAuB;AACrB;AACAL,MAAAA,QAAQ,CAACV,WAAW,CAACc,MAAM,CAACX,IAAR,CAAZ,CAAR;AACD,KAHD,MAGO;AACL;AACAO,MAAAA,QAAQ,CAACN,QAAQ,CAACU,MAAM,CAACT,GAAR,CAAT,CAAR;AACD;AACF,GAtBH;AAuBC,CA1CM,C,CA+CP;;AACA,OAAO,MAAMW,KAAK,GAAIf,IAAD,IAAU;AAC3B,QAAM;AAACM,IAAAA,QAAD;AAAWC,IAAAA;AAAX,MAAuBP,IAA7B;;AACA,MAAG,CAACM,QAAJ,EAAc;AACV,WAAOH,QAAQ,CAAC,oBAAD,CAAf;AACH;;AACD,MAAG,CAACI,QAAJ,EAAc;AACV,WAAOJ,QAAQ,CAAC,oBAAD,CAAf;AACH;;AAED,SAAO,MAAMM,QAAN,IAAkB;AACrB,UAAMC,QAAQ,GAAG,MAAMZ,QAAQ,CAAC;AAC9BQ,MAAAA,QAD8B;AAE9BC,MAAAA;AAF8B,KAAD,CAA/B;AAIA,UAAMM,MAAM,GAAGH,QAAQ,CAACR,IAAxB;;AACA,QAAIW,MAAM,CAACC,IAAP,KAAgB,CAApB,EAAuB;AACrBL,MAAAA,QAAQ,CAACV,WAAW,CAACc,MAAM,CAACX,IAAR,CAAZ,CAAR;AACD,KAFD,MAEO;AACLO,MAAAA,QAAQ,CAACN,QAAQ,CAACU,MAAM,CAACT,GAAR,CAAT,CAAR;AACD;AACF,GAXH;AAYC,CArBE","sourcesContent":["/*\n包含n个action creator\n异步action\n同步action\n*/\nimport {\n    AUTH_SUCCESS,\n    ERROR_MSG\n} from './Action-types'\n\nimport {\n    reqRegister,\n    reqLogin\n} from '../api'\n\n\n\n\n//授权成功的同步 action\nconst authSuccess = (user) => ({type: AUTH_SUCCESS, data: user})\n//错误提示星系的同步action\nconst errorMsg = (msg) => ({type: ERROR_MSG, data: msg})\n\n//注册异步 action\nexport const register = (user) => {\n    const {\n        username, \n        password, \n        password2, \n        type\n    } = user\n    if(!username) {\n        return errorMsg('username is a MUST')\n    }\n    if(password !== password2) {\n        return errorMsg('ensure SAME password')\n    }\n\n\n    \n\n\n\nreturn async dispatch => {\n    // 发送注册的异步请求。\n    // 得到promise,通过then链式调用，获取数据\n    /* const promise = reqRegister(user)\n    promise.then(response => {\n        const result = response.data\n    }) */\n    // 直接获取异步结果\n    const response = await reqRegister({\n      username,\n      password,\n      type\n    })\n    console.log(\"register -> response\", response)\n    const result = response.data\n    if (result.code === 0) {\n      // 成功，分发授权成功的同步action\n      dispatch(authSuccess(result.data))\n    } else {\n      // 失败，分发错误提示信息的同步action\n      dispatch(errorMsg(result.msg))\n    }\n  }\n}\n\n\n\n\n//登陆异步 action\nexport const login = (user) => {\n    const {username, password} = user\n    if(!username) {\n        return errorMsg('username is a MUST')\n    }\n    if(!password) {\n        return errorMsg('PASSWORD is a MUST')\n    }\n\n    return async dispatch => {\n        const response = await reqLogin({\n          username,\n          password\n        })\n        const result = response.data\n        if (result.code === 0) {\n          dispatch(authSuccess(result.data))\n        } else {\n          dispatch(errorMsg(result.msg))\n        }\n      }\n    }"]},"metadata":{},"sourceType":"module"}