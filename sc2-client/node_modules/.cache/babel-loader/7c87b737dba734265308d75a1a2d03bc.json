{"ast":null,"code":"/*\n包含n个action creator\n异步action\n同步action\n*/\nimport { AUTH_SUCCESS, ERROR_MSG } from './Action-types';\nimport { reqRegister, reqLogin } from '../api';\nexport const register = user => {\n  const {\n    username,\n    password,\n    password2,\n    type\n  } = user; // 前台验证不通过\n\n  if (!username) {\n    return errorMsg('用户名不能为空');\n  } else if (password !== password2) {\n    return errorMsg('密码不一致');\n  }\n\n  return async dispatch => {\n    // 发送注册的异步请求。\n    // 得到promise,通过then链式调用，获取数据\n\n    /* const promise = reqRegister(user)\n    promise.then(response => {\n        const result = response.data\n    }) */\n    // 直接获取异步结果\n    const response = await reqRegister({\n      username,\n      password,\n      type\n    });\n    console.log(\"register -> response\", response);\n    const result = response.data;\n\n    if (result.code === 0) {\n      //_getMsgList(dispatch, result.data._id)\n      // 成功，分发授权成功的同步action\n      dispatch(authSuccess(result.data));\n    } else {\n      // 失败，分发错误提示信息的同步action\n      dispatch(errorMsg(result.msg));\n    }\n  };\n}; // 登录异步action\n\nexport const login = user => {\n  const {\n    username,\n    password\n  } = user;\n\n  if (!username) {\n    return errorMsg('用户名不能为空');\n  } else if (!password) {\n    return errorMsg('密码不能为空');\n  }\n\n  return async dispatch => {\n    const response = await reqLogin({\n      username,\n      password\n    });\n    const result = response.data;\n\n    if (result.code === 0) {\n      //_getMsgList(dispatch, result.data._id)\n      dispatch(authSuccess(result.data));\n    } else {\n      dispatch(errorMsg(result.msg));\n    }\n  };\n}; // 授权成功的同步action\n\nconst authSuccess = user => ({\n  type: AUTH_SUCCESS,\n  data: user\n}); // 错误提示信息的同步action\n\n\nconst errorMsg = msg => ({\n  type: ERROR_MSG,\n  data: msg\n});","map":{"version":3,"sources":["/Users/s/Desktop/react/hiring-app/sc2-client/src/redux/Actions.js"],"names":["AUTH_SUCCESS","ERROR_MSG","reqRegister","reqLogin","register","user","username","password","password2","type","errorMsg","dispatch","response","console","log","result","data","code","authSuccess","msg","login"],"mappings":"AAAA;;;;;AAKA,SACIA,YADJ,EAEIC,SAFJ,QAGO,gBAHP;AAKA,SACIC,WADJ,EAEIC,QAFJ,QAGO,QAHP;AAMA,OAAO,MAAMC,QAAQ,GAAIC,IAAD,IAAU;AAC9B,QAAM;AACJC,IAAAA,QADI;AAEJC,IAAAA,QAFI;AAGJC,IAAAA,SAHI;AAIJC,IAAAA;AAJI,MAKFJ,IALJ,CAD8B,CAQ9B;;AACA,MAAI,CAACC,QAAL,EAAe;AACb,WAAOI,QAAQ,CAAC,SAAD,CAAf;AACD,GAFD,MAEO,IAAIH,QAAQ,KAAKC,SAAjB,EAA4B;AACjC,WAAOE,QAAQ,CAAC,OAAD,CAAf;AACD;;AAED,SAAO,MAAMC,QAAN,IAAkB;AACvB;AACA;;AACA;;;;AAIA;AACA,UAAMC,QAAQ,GAAG,MAAMV,WAAW,CAAC;AACjCI,MAAAA,QADiC;AAEjCC,MAAAA,QAFiC;AAGjCE,MAAAA;AAHiC,KAAD,CAAlC;AAKAI,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,QAApC;AACA,UAAMG,MAAM,GAAGH,QAAQ,CAACI,IAAxB;;AACA,QAAID,MAAM,CAACE,IAAP,KAAgB,CAApB,EAAuB;AACrB;AACA;AACAN,MAAAA,QAAQ,CAACO,WAAW,CAACH,MAAM,CAACC,IAAR,CAAZ,CAAR;AACD,KAJD,MAIO;AACL;AACAL,MAAAA,QAAQ,CAACD,QAAQ,CAACK,MAAM,CAACI,GAAR,CAAT,CAAR;AACD;AACF,GAvBD;AAwBD,CAvCI,C,CAyCL;;AACA,OAAO,MAAMC,KAAK,GAAIf,IAAD,IAAU;AAC7B,QAAM;AACJC,IAAAA,QADI;AAEJC,IAAAA;AAFI,MAGFF,IAHJ;;AAKA,MAAI,CAACC,QAAL,EAAe;AACb,WAAOI,QAAQ,CAAC,SAAD,CAAf;AACD,GAFD,MAEO,IAAI,CAACH,QAAL,EAAe;AACpB,WAAOG,QAAQ,CAAC,QAAD,CAAf;AACD;;AAED,SAAO,MAAMC,QAAN,IAAkB;AACvB,UAAMC,QAAQ,GAAG,MAAMT,QAAQ,CAAC;AAC9BG,MAAAA,QAD8B;AAE9BC,MAAAA;AAF8B,KAAD,CAA/B;AAIA,UAAMQ,MAAM,GAAGH,QAAQ,CAACI,IAAxB;;AACA,QAAID,MAAM,CAACE,IAAP,KAAgB,CAApB,EAAuB;AACrB;AACAN,MAAAA,QAAQ,CAACO,WAAW,CAACH,MAAM,CAACC,IAAR,CAAZ,CAAR;AACD,KAHD,MAGO;AACLL,MAAAA,QAAQ,CAACD,QAAQ,CAACK,MAAM,CAACI,GAAR,CAAT,CAAR;AACD;AACF,GAZD;AAaD,CAzBM,C,CA6BP;;AACF,MAAMD,WAAW,GAAIb,IAAD,KAAW;AAC3BI,EAAAA,IAAI,EAAET,YADqB;AAE3BgB,EAAAA,IAAI,EAAEX;AAFqB,CAAX,CAApB,C,CAKE;;;AACF,MAAMK,QAAQ,GAAIS,GAAD,KAAU;AACvBV,EAAAA,IAAI,EAAER,SADiB;AAEvBe,EAAAA,IAAI,EAAEG;AAFiB,CAAV,CAAjB","sourcesContent":["/*\n包含n个action creator\n异步action\n同步action\n*/\nimport {\n    AUTH_SUCCESS,\n    ERROR_MSG\n} from './Action-types'\n\nimport {\n    reqRegister,\n    reqLogin\n} from '../api'\n\n\nexport const register = (user) => {\n    const {\n      username,\n      password,\n      password2,\n      type\n    } = user\n  \n    // 前台验证不通过\n    if (!username) {\n      return errorMsg('用户名不能为空')\n    } else if (password !== password2) {\n      return errorMsg('密码不一致')\n    }\n  \n    return async dispatch => {\n      // 发送注册的异步请求。\n      // 得到promise,通过then链式调用，获取数据\n      /* const promise = reqRegister(user)\n      promise.then(response => {\n          const result = response.data\n      }) */\n      // 直接获取异步结果\n      const response = await reqRegister({\n        username,\n        password,\n        type\n      })\n      console.log(\"register -> response\", response)\n      const result = response.data\n      if (result.code === 0) {\n        //_getMsgList(dispatch, result.data._id)\n        // 成功，分发授权成功的同步action\n        dispatch(authSuccess(result.data))\n      } else {\n        // 失败，分发错误提示信息的同步action\n        dispatch(errorMsg(result.msg))\n      }\n    }\n  }\n  \n  // 登录异步action\n  export const login = (user) => {\n    const {\n      username,\n      password\n    } = user\n  \n    if (!username) {\n      return errorMsg('用户名不能为空')\n    } else if (!password) {\n      return errorMsg('密码不能为空')\n    }\n  \n    return async dispatch => {\n      const response = await reqLogin({\n        username,\n        password\n      })\n      const result = response.data\n      if (result.code === 0) {\n        //_getMsgList(dispatch, result.data._id)\n        dispatch(authSuccess(result.data))\n      } else {\n        dispatch(errorMsg(result.msg))\n      }\n    }\n  }\n\n\n\n  // 授权成功的同步action\nconst authSuccess = (user) => ({\n    type: AUTH_SUCCESS,\n    data: user\n  })\n\n  // 错误提示信息的同步action\nconst errorMsg = (msg) => ({\n    type: ERROR_MSG,\n    data: msg\n  })"]},"metadata":{},"sourceType":"module"}