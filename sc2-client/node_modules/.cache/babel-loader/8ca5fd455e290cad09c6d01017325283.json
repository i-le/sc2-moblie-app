{"ast":null,"code":"import\"antd-mobile/lib/badge/style/css\";import _Badge from\"antd-mobile/lib/badge\";import _classCallCheck from\"/Users/s/Desktop/react/sc2-app/sc2-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/s/Desktop/react/sc2-app/sc2-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/s/Desktop/react/sc2-app/sc2-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/s/Desktop/react/sc2-app/sc2-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import\"antd-mobile/lib/list/style/css\";import _List from\"antd-mobile/lib/list\";/* \nmessage interface component\n*/import React from'react';import{connect}from'react-redux';var Item=_List.Item;var Brief=Item.Brief;function getLastMsgs(chatMsgs,userid){// 1.find each target's lastMsg，save {chat_id: lastMsg} as one object\nvar lastMsgObj={};chatMsgs.forEach(function(msg){/* \n    getting unread message\n    */ // a.对msg进行个体统计(别人发给你，且read标识为未读)\nif(msg.to===userid&&!msg.read){msg.unReadCount=1;}else{msg.unReadCount=0;}var chatId=msg.chat_id;// getting saved lastMsg\nvar lastMsg=lastMsgObj[chatId];if(!lastMsg){lastMsgObj[chatId]=msg;}else{// b.累加unReadCount = 已统计的 + 当前msg的\nvar unReadCount=lastMsg.unReadCount+msg.unReadCount;// 如果msg比lastMsg晚，就将msg保存为lastMsg\nif(msg.create_time>lastMsg.create_time){lastMsgObj[chatId]=msg;}// c.将unReadCount保存在最新的lastMsg上\nlastMsgObj[chatId].unReadCount=unReadCount;}});// 2.转化成lastMsg数组\nvar lastMsgs=Object.values(lastMsgObj);// 3.排序，按时间\nlastMsgs.sort(function(m1,m2){// 结果<0, m1放前面\nreturn m2.create_time-m1.create_time;});console.log(\"function_getLastMsgs -> lastMsgs\",lastMsgs);return lastMsgs;}var Message=/*#__PURE__*/function(_React$Component){_inherits(Message,_React$Component);var _super=_createSuper(Message);function Message(){_classCallCheck(this,Message);return _super.apply(this,arguments);}_createClass(Message,[{key:\"render\",value:function render(){var _this=this;var user=this.props.user;var _this$props$chat=this.props.chat,users=_this$props$chat.users,chatMsgs=_this$props$chat.chatMsgs;// 对chatMsg按chat_id进行分组，取出每组最后一条\nvar lastMsgs=getLastMsgs(chatMsgs,user._id);return/*#__PURE__*/React.createElement(_List,{style:{marginTop:50,marginBottom:50}},lastMsgs.map(function(msg){// getting target id\nvar targetUserId=msg.to===user._id?msg.from:msg.to;// getting target id info\nvar targetUser=users[targetUserId];return/*#__PURE__*/React.createElement(Item,{extra:/*#__PURE__*/React.createElement(_Badge,{text:msg.unReadCount}),thumb:targetUser.avatar?require(\"../../assets/sc2avatars/\".concat(targetUser.avatar,\".png\")):null,arrow:\"horizontal\",key:msg.chat_id,onClick:function onClick(){return _this.props.history.push(\"/chat/\".concat(targetUserId));}},msg.content,/*#__PURE__*/React.createElement(Brief,null,targetUser.username));}));}}]);return Message;}(React.Component);export default connect(function(state){return{user:state.user,chat:state.chat};},{})(Message);","map":{"version":3,"sources":["/Users/s/Desktop/react/sc2-app/sc2-client/src/containers/message/message.js"],"names":["React","connect","Item","Brief","getLastMsgs","chatMsgs","userid","lastMsgObj","forEach","msg","to","read","unReadCount","chatId","chat_id","lastMsg","create_time","lastMsgs","Object","values","sort","m1","m2","console","log","Message","user","props","chat","users","_id","marginTop","marginBottom","map","targetUserId","from","targetUser","avatar","require","history","push","content","username","Component","state"],"mappings":"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","sourcesContent":["/* \nmessage interface component\n*/\nimport React from 'react'\nimport {connect} from 'react-redux'\nimport {List, Badge} from 'antd-mobile'\n\nconst Item = List.Item\nconst Brief = Item.Brief\n\nfunction getLastMsgs(chatMsgs, userid) {\n  // 1.find each target's lastMsg，save {chat_id: lastMsg} as one object\n  const lastMsgObj = {}\n  chatMsgs.forEach(msg => {\n\n    /* \n    getting unread message\n    */\n    // a.对msg进行个体统计(别人发给你，且read标识为未读)\n    if (msg.to === userid && !msg.read) {\n      msg.unReadCount = 1\n    } else {\n      msg.unReadCount = 0\n    }\n\n    const chatId = msg.chat_id\n    // getting saved lastMsg\n    const lastMsg = lastMsgObj[chatId]\n    if (!lastMsg) {\n      lastMsgObj[chatId] = msg\n    } else {\n      \n      // b.累加unReadCount = 已统计的 + 当前msg的\n      const unReadCount = lastMsg.unReadCount + msg.unReadCount\n\n      // 如果msg比lastMsg晚，就将msg保存为lastMsg\n      if (msg.create_time > lastMsg.create_time) {\n        lastMsgObj[chatId] = msg\n      }\n\n      // c.将unReadCount保存在最新的lastMsg上\n      lastMsgObj[chatId].unReadCount = unReadCount\n    }\n  })\n  // 2.转化成lastMsg数组\n  const lastMsgs = Object.values(lastMsgObj)\n  // 3.排序，按时间\n  lastMsgs.sort(function(m1, m2) {\n    // 结果<0, m1放前面\n    return m2.create_time - m1.create_time\n  })\n\n  console.log(\"function_getLastMsgs -> lastMsgs\", lastMsgs)\n  return lastMsgs\n}\n\nclass Message extends React.Component {\n \n  render() {\n    const {user} = this.props\n    const {users, chatMsgs} = this.props.chat\n    // 对chatMsg按chat_id进行分组，取出每组最后一条\n    const lastMsgs = getLastMsgs(chatMsgs, user._id)\n\n    return(\n      <List style={{marginTop: 50, marginBottom: 50}}>\n        {\n          lastMsgs.map(msg => {\n            // getting target id\n            const targetUserId = msg.to === user._id ? msg.from : msg.to\n            // getting target id info\n            const targetUser = users[targetUserId]\n            return (\n              <Item extra={<Badge text={msg.unReadCount} />}\n                thumb={targetUser.avatar ? require(`../../assets/sc2avatars/${targetUser.avatar}.png`) : null}\n                arrow='horizontal'\n                key={msg.chat_id}\n                onClick={() => this.props.history.push(`/chat/${targetUserId}`)}\n              >\n                {msg.content}\n                <Brief>{targetUser.username}</Brief>\n              </Item>\n            )\n          })\n        }\n      </List>\n    )\n  }\n}\n\nexport default connect(\n  state => ({user: state.user, chat: state.chat}),\n  {}\n)(Message)"]},"metadata":{},"sourceType":"module"}