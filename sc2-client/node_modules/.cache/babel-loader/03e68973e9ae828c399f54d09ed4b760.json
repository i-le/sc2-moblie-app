{"ast":null,"code":"/*\n包含n个reducer函数：\n根据老得state和指定的action返回一个新的state\n*/\nimport { combineReducers } from 'redux';\nimport { AUTH_SUCCESS, ERROR_MSG, RECEIVE_USER, RESET_USER, RECEIVE_USER_LIST, RECEIVE_MSG_LIST, RECEIVE_MSG, MSG_READED } from './Action-types';\nimport { getRedirectTo } from '../utils/index';\nconst initUser = {\n  username: '',\n  type: '',\n  msg: '',\n  redirectTo: '' // 需要自动重定向的路由路径\n\n}; //产生user状态的reducer\n\nfunction user(state = initUser, action) {\n  switch (action.type) {\n    case AUTH_SUCCESS:\n      //data 是user\n      const {\n        type,\n        avatar\n      } = action.data;\n      return { ...state,\n        ...action.data,\n        redirectTo: getRedirectTo(type, avatar)\n      };\n\n    case ERROR_MSG:\n      //data 是msg\n      return { ...state,\n        msg: action.data\n      };\n\n    case RECEIVE_USER:\n      //data 是USER\n      return action.data;\n\n    case RESET_USER:\n      //data 是msg\n      return { ...initUser,\n        msg: action.data\n      };\n\n    default:\n      return state;\n  }\n}\n\nconst initUserList = []; // 产生userlist状态的reducer\n\nfunction userList(state = initUserList, action) {\n  switch (action.type) {\n    case RECEIVE_USER_LIST:\n      //data is userList\n      return action.data;\n\n    default:\n      return state;\n  }\n}\n\nconst initChat = {\n  // 所有用户简要信息（姓名，头像）\n  users: {},\n  // 当前用户所有消息\n  chatMsgs: [],\n  // 未读消息总数\n  unReadCount: 0\n};\n\nfunction chat(state = initChat, action) {\n  switch (action.type) {\n    case RECEIVE_MSG_LIST:\n      const {\n        users,\n        chatMsgs,\n        userid\n      } = action.data;\n      console.log(\"chat -> action.data\", action.data);\n      return {\n        users,\n        chatMsgs,\n        // 直接在message也可统计\n        unReadCount: chatMsgs.reduce((preTotal, msg) => preTotal + (!msg.read && msg.to === userid ? 1 : 0), 0)\n      };\n\n    case RECEIVE_MSG:\n      // const {chatMsg, userid} = action.data\n      const {\n        chatMsg\n      } = action.data; // debugger\n\n      return {\n        users: state.users,\n        chatMsgs: [...state.chatMsgs, chatMsg],\n        unReadCount: state.unReadCount + (!chatMsg.read && chatMsg.to === action.data.userid ? 1 : 0)\n      };\n\n    case MSG_READED:\n      const {\n        from,\n        to,\n        count\n      } = action.data; // state.chatMsgs.forEach(msg => {\n      //   if (msg.from === from && msg.to === to && !msg.read) {\n      //     msg.read = true\n      //   }\n      // })\n\n      return {\n        users: state.users,\n        chatMsgs: state.chatMsgs.map(msg => {\n          // 需要更新\n          if (msg.from === from && msg.to === to && !msg.read) {\n            // 新的msg中read: true,不改变原来的msg\n\n            /* msg.read = true\n            return msg */\n            return { ...msg,\n              read: true\n            };\n          } else {\n            // 不需要更新\n            return msg;\n          }\n        }),\n        unReadCount: state.unReadCount - count\n      };\n\n    default:\n      return state;\n  }\n} //向外暴露的状态的结构 ： {user: { }}\n\n\nexport default combineReducers({\n  user,\n  userList,\n  chat\n});","map":{"version":3,"sources":["/Users/s/Desktop/react/sc2-app/sc2-client/src/redux/Reducers.js"],"names":["combineReducers","AUTH_SUCCESS","ERROR_MSG","RECEIVE_USER","RESET_USER","RECEIVE_USER_LIST","RECEIVE_MSG_LIST","RECEIVE_MSG","MSG_READED","getRedirectTo","initUser","username","type","msg","redirectTo","user","state","action","avatar","data","initUserList","userList","initChat","users","chatMsgs","unReadCount","chat","userid","console","log","reduce","preTotal","read","to","chatMsg","from","count","map"],"mappings":"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","sourcesContent":["/*\n包含n个reducer函数：\n根据老得state和指定的action返回一个新的state\n*/\nimport {combineReducers} from 'redux'\n\nimport {\n    AUTH_SUCCESS,\n    ERROR_MSG,\n    RECEIVE_USER,\n    RESET_USER,\n    RECEIVE_USER_LIST,\n    RECEIVE_MSG_LIST,\n    RECEIVE_MSG,\n    MSG_READED\n} from './Action-types'\n\nimport {getRedirectTo} from '../utils/index'\n\nconst initUser = {\n    username: '',\n    type: '',\n    msg: '',\n    redirectTo: '' // 需要自动重定向的路由路径\n}\n\n//产生user状态的reducer\nfunction user(state = initUser, action) {\n    switch (action.type) {\n        case AUTH_SUCCESS: //data 是user\n        const {type, avatar} = action.data\n            return {...state, ...action.data, redirectTo: getRedirectTo(type, avatar)}\n        case ERROR_MSG: //data 是msg\n            return {...state, msg: action.data}\n        case RECEIVE_USER: //data 是USER\n            return action.data\n        case RESET_USER: //data 是msg\n            return {...initUser, msg: action.data}\n        default:\n            return state\n        }\n}\n\nconst initUserList = []\n// 产生userlist状态的reducer\nfunction userList(state=initUserList, action) {\n    switch (action.type) {\n        case RECEIVE_USER_LIST: //data is userList\n        return action.data\n        default:\n            return state\n    }\n}\n\nconst initChat = {\n    // 所有用户简要信息（姓名，头像）\n    users: {},\n    // 当前用户所有消息\n    chatMsgs: [],\n    // 未读消息总数\n    unReadCount: 0\n  }\n  function chat(state=initChat, action) {\n    switch (action.type) {\n      case RECEIVE_MSG_LIST:\n        const {users, chatMsgs, userid} = action.data\n        console.log(\"chat -> action.data\", action.data)\n        return {\n          users,\n          chatMsgs,\n          // 直接在message也可统计\n          unReadCount: chatMsgs.reduce((preTotal, msg) => preTotal + (!msg.read && msg.to === userid ? 1 : 0), 0)\n        }\n      case RECEIVE_MSG:\n        // const {chatMsg, userid} = action.data\n        const {chatMsg} = action.data\n        // debugger\n        return {\n          users: state.users,\n          chatMsgs: [...state.chatMsgs, chatMsg],\n          unReadCount: state.unReadCount + (!chatMsg.read && chatMsg.to === action.data.userid ? 1 : 0)\n        }\n      case MSG_READED:\n        const {from, to, count} = action.data\n        // state.chatMsgs.forEach(msg => {\n        //   if (msg.from === from && msg.to === to && !msg.read) {\n        //     msg.read = true\n        //   }\n        // })\n        return {\n          users: state.users,\n          chatMsgs: state.chatMsgs.map(msg => {\n            // 需要更新\n            if (msg.from === from && msg.to === to && !msg.read) {\n              // 新的msg中read: true,不改变原来的msg\n              /* msg.read = true\n              return msg */\n              return {...msg, read: true}\n            } else {\n              // 不需要更新\n              return msg\n            }\n          }),\n          unReadCount: state.unReadCount - count\n        }\n      default:\n        return state\n    }\n  }\n\n//向外暴露的状态的结构 ： {user: { }}\nexport default combineReducers({\n    user,\n    userList,\n    chat\n})\n\n"]},"metadata":{},"sourceType":"module"}