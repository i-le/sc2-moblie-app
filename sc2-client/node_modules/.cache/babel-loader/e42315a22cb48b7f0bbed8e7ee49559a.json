{"ast":null,"code":"/*\n包含n个action creator\n异步action\n同步action\n*/\nimport { AUTH_SUCCESS, ERROR_MSG, RECEIVE_USER, RESET_USER } from './Action-types';\nimport { reqRegister, reqLogin, reqUpdateUser } from '../api'; //授权成功的同步 action\n\nconst authSuccess = user => ({\n  type: AUTH_SUCCESS,\n  data: user\n}); //错误提示星系的同步action\n\n\nconst errorMsg = msg => ({\n  type: ERROR_MSG,\n  data: msg\n}); // 接收用户的同步action\n\n\nconst receiveUser = user => ({\n  type: RECEIVE_USER,\n  data: user\n}); // 重制用户同步action\n\n\nconst resetUser = msg => ({\n  type: RESET_USER,\n  data: msg\n}); //注册异步 action\n\n\nexport const register = user => {\n  const {\n    username,\n    password,\n    password2,\n    type\n  } = user;\n\n  if (!username) {\n    return errorMsg('username is a MUST');\n  } else if (password !== password2) {\n    return errorMsg('ensure SAME password');\n  }\n\n  return async dispatch => {\n    // 发送注册的异步请求。\n    // 得到promise,通过then链式调用，获取数据\n\n    /* const promise = reqRegister(user)\n    promise.then(response => {\n        const result = response.data\n    }) */\n    // 直接获取异步结果\n    const response = await reqRegister({\n      username,\n      password,\n      type\n    });\n    console.log(\"register -> response\", response);\n    const result = response.data;\n\n    if (result.code === 0) {\n      // 成功，分发授权成功的同步action\n      console.log(result.data);\n      dispatch(authSuccess(result.data));\n    } else {\n      // 失败，分发错误提示信息的同步action\n      dispatch(errorMsg(result.msg));\n    }\n  };\n}; //登陆异步 action\n\nexport const login = user => {\n  const {\n    username,\n    password\n  } = user;\n\n  if (!username) {\n    return errorMsg('username is a MUST');\n  }\n\n  if (!password) {\n    return errorMsg('PASSWORD is a MUST');\n  }\n\n  return async dispatch => {\n    const response = await reqLogin({\n      username,\n      password\n    });\n    const result = response.data;\n\n    if (result.code === 0) {\n      dispatch(authSuccess(result.data));\n    } else {\n      dispatch(errorMsg(result.msg));\n    }\n  };\n}; // updating 异步 action\n\nexport const updateUser = user => {\n  return async dispatch => {\n    const response = await reqUpdateUser(user);\n    const result = response.data;\n\n    if (result.code === 0) {\n      dispatch(receiveUser(result.data));\n    } else {\n      dispatch(resetUser(result.data));\n    }\n  };\n};","map":{"version":3,"sources":["/Users/s/Desktop/react/sc2-app/sc2-client/src/redux/Actions.js"],"names":["AUTH_SUCCESS","ERROR_MSG","RECEIVE_USER","RESET_USER","reqRegister","reqLogin","reqUpdateUser","authSuccess","user","type","data","errorMsg","msg","receiveUser","resetUser","register","username","password","password2","dispatch","response","console","log","result","code","login","updateUser"],"mappings":"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","sourcesContent":["/*\n包含n个action creator\n异步action\n同步action\n*/\nimport {\n    AUTH_SUCCESS,\n    ERROR_MSG,\n    RECEIVE_USER,\n    RESET_USER\n} from './Action-types'\n\nimport {\n    reqRegister,\n    reqLogin,\n    reqUpdateUser\n} from '../api'\n\n\n\n\n//授权成功的同步 action\nconst authSuccess = (user) => ({type: AUTH_SUCCESS, data: user})\n//错误提示星系的同步action\nconst errorMsg = (msg) => ({type: ERROR_MSG, data: msg})\n// 接收用户的同步action\nconst receiveUser = (user) => ({type: RECEIVE_USER, data: user})\n// 重制用户同步action\nconst resetUser = (msg) => ({type: RESET_USER, data: msg})\n\n//注册异步 action\nexport const register = (user) => {\n    const {\n        username, \n        password, \n        password2, \n        type\n    } = user\n\n    if(!username) {\n        return errorMsg('username is a MUST')\n    } else if(password !== password2) {\n        return errorMsg('ensure SAME password')\n    } \n        \n    return async dispatch => {\n    // 发送注册的异步请求。\n    // 得到promise,通过then链式调用，获取数据\n    /* const promise = reqRegister(user)\n    promise.then(response => {\n        const result = response.data\n    }) */\n    // 直接获取异步结果\n    const response = await reqRegister({\n      username,\n      password,\n      type\n    })\n    console.log(\"register -> response\", response)\n    const result = response.data\n    if (result.code === 0) {\n      // 成功，分发授权成功的同步action\n      console.log(result.data)\n      dispatch(authSuccess(result.data))\n    } else {\n      // 失败，分发错误提示信息的同步action\n      dispatch(errorMsg(result.msg))\n    }\n  }\n}\n\n\n\n\n//登陆异步 action\nexport const login = (user) => {\n    const {username, password} = user\n    if(!username) {\n        return errorMsg('username is a MUST')\n    }\n    if(!password) {\n        return errorMsg('PASSWORD is a MUST')\n    }\n\n    return async dispatch => {\n        const response = await reqLogin({\n          username,\n          password\n        })\n        const result = response.data\n        if (result.code === 0) {\n          dispatch(authSuccess(result.data))\n        } else {\n          dispatch(errorMsg(result.msg))\n        }\n      }\n    }\n\n    // updating 异步 action\nexport const updateUser = (user) => {\n  return async dispatch => {\n    const response = await reqUpdateUser(user)\n    const result = response.data\n    if(result.code === 0) {\n      dispatch(receiveUser(result.data))\n    } else {\n      dispatch(resetUser(result.data))\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}